<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atapi</name>
    </assembly>
    <members>
        <member name="T:JulMar.Atapi.CallingCard">
            <summary>
            Describes a calling card
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard.Id">
            <summary>
            Permanent identifier that identifies the card. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard.Name">
            <summary>
            String that describes the card in a user-friendly manner.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard.DigitCount">
            <summary>
            Number of digits in the existing card number. The card number itself is not returned for security reasons 
            (it is stored in scrambled form by TAPI). The application can use this to insert filler bytes into a text control in "password" mode to show that a number exists. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard.SameAreaCodeRules">
            <summary>
            The dialing rules applied to calls placed within the same area code.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard.LongDistanceRules">
            <summary>
            The dialing rules applied to calls identified as long distance within the same country code.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard.InternationalRules">
            <summary>
            The dialing rules applied to calls outside the country.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingCard._features">
            <summary>
            Known features
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallingCard.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallingCard.ToString">
            <summary>
            Returns a System.String representing this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Atapi.CallingCard.IsHidden">
            <summary>
            This calling card has been hidden by the user. It is not shown by Dial Helper in the main listing of available calling cards, 
            but will be shown in the list of cards from which dialing rules can be copied. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallingCard.IsPredefined">
            <summary>
            This calling card is one of the predefined calling card definitions included with Telephony by Microsoft. It cannot be removed entirely using Dial Helper; 
            if the user attempts to remove it, it will become HIDDEN. It thus continues to be accessible for copying of dialing rules. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallingLocation">
            <summary>
            This class describes a location used to provide an address translation context.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.Id">
            <summary>
            Permanent identifier that identifies the location. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.Name">
            <summary>
            String that describes the location in a user-friendly manner.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.Country">
            <summary>
            Country for this location
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.CityCode">
            <summary>
            String specifying the city/area code associated with the location. This information, along with the country code, can be used by 
            applications to "default" entry fields for the user when entering phone numbers, to encourage the entry of proper canonical numbers
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.PreferredCallingCard">
            <summary>
            Preferred Calling card id
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.LocalAccessCode">
            <summary>
            The access code to be dialed before calls to addresses in the local calling area.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.LongDistanceAccessCode">
            <summary>
            The access code to be dialed before calls to long-distance addresses.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallingLocation.CancelCallWaitingPrefix">
            <summary>
            String containing the dial digits and modifier characters that should be prefixed to the dialable string to cancel call waiting for this location.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallingLocation.#ctor(System.Int32,JulMar.Atapi.CallingCard,System.String,JulMar.Atapi.Country,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallingLocation.ToString">
            <summary>
            This provides an override for the ToString method.
            </summary>
            <returns>String representing this calling location</returns>
        </member>
        <member name="P:JulMar.Atapi.CallingLocation.TollPrefixes">
            <summary>
            The toll prefix list for the location. The string array contains only prefixes consisting of the digits "0" through "9".
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallingLocation.CanPulseDial">
            <summary>
            The default dialing mode at this location is pulse dialing. If this returns true, then TranslateAddress will insert a "P" dial modifier at the beginning 
            of the dialable string returned when this location is selected. Otherwise, TranslateAddress will insert a "T" dial modifier at the beginning of the dialable string.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallTreatment">
            <summary>
            This class provides information on the type of call treatment, such as music, recorded announcement, or silence, on the current call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallTreatment.Silence">
            <summary>
            When the call is not actively connected to a device (offering or onhold), the party hears silence. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallTreatment.Ringback">
            <summary>
            When the call is not actively connected to a device (offering or onhold), the party hears ringback tone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallTreatment.Busy">
            <summary>
            When the call is not actively connected to a device (offering or onhold), the party hears busy signal. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallTreatment.Music">
            <summary>
            When the call is not actively connected to a device (offering or onhold), the party hears music. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallTreatment.Id">
            <summary>
            The id for this treatment (predefined or custom)
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallTreatment.Name">
            <summary>
            The textual name for this treatment
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallTreatment.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">id</param>
            <param name="name">name</param>
        </member>
        <member name="T:JulMar.Atapi.Country">
            <summary>
            This class represents a single country identified by TAPI dialing rules.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Country.Id">
            <summary>
            Country/region identifier of the entry. The country/region identifier is an internal identifier that allows multiple entries to exist in the country/region 
            list with the same country/region code, for example, all countries or regions in North America and the Caribbean share the country/region code 1, but require 
            separate entries in the list. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Country.CountryCode">
            <summary>
            Country/region code of the country/region represented by the entry; that is, the digits dialed in an international call. 
            Only this value should be displayed to users. Country/region identifiers should never be displayed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Country.Name">
            <summary>
            Specifies the name of the country/region
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Country.SameAreaCodeRules">
            <summary>
            The dialing rules applied to calls placed within the same area code.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Country.LongDistanceRules">
            <summary>
            The dialing rules applied to calls identified as long distance within the same country code.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Country.InternationalRules">
            <summary>
            The dialing rules applied to calls outside the country.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.Country.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="countryCode"></param>
            <param name="name"></param>
            <param name="areaCodeRule"></param>
            <param name="longDistRule"></param>
            <param name="intRule"></param>
        </member>
        <member name="M:JulMar.Atapi.Country.ToString">
            <summary>
            Returns a System.String representing this country
            </summary>
            <returns></returns>
        </member>
        <member name="T:JulMar.Atapi.ForwardInfo">
            <summary>
            This class describes a single set of forwarding instructions for an address or line device.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardInfo.ForwardMode">
            <summary>
            Types of forwarding.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardInfo.CallerAddressType">
            <summary>
            Type of caller address. Only used in specific forwarding cases (BusyNoAnswerSpecific, NoAnswerSpecific, UnconditionalSpecific, BusySpecific).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardInfo.CallerAddress">
            <summary>
            Address of a caller to be forwarded. Only used in specific forwarding cases (BusyNoAnswerSpecific, NoAnswerSpecific, UnconditionalSpecific, BusySpecific).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardInfo.DestinationCountryCode">
            <summary>
            Country code of the destination address to which the call is to be forwarded. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardInfo.DestinationAddressType">
            <summary>
            Destination address type.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardInfo.DestinationAddress">
            <summary>
            The address of the address where calls are to be forwarded.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.#ctor(JulMar.Atapi.ForwardingMode,System.Int32,System.String)">
            <summary>
            Most common form of constructor.
            </summary>
            <param name="mode">Forwarding mode</param>
            <param name="destinationCountryCode">Destination country code, zero for default</param>
            <param name="destinationAddress">Destination address</param>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.#ctor(JulMar.Atapi.ForwardingMode,System.Int32,JulMar.Atapi.AddressType,System.String)">
            <summary>
            Constructor for typical forwarding call when destination is not a phone number.
            </summary>
            <param name="mode">Forwarding mode</param>
            <param name="destinationCountryCode">Destination country code, zero for default</param>
            <param name="destinationType">Destination address type</param>
            <param name="destinationAddress">Destination address</param>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.#ctor(JulMar.Atapi.ForwardingMode,System.String,System.Int32,System.String)">
            <summary>
            Specific forwarding constructor
            </summary>
            <param name="mode">Forwarding mode - must be BusyNoAnswerSpecific, NoAnswerSpecific, UnconditionalSpecific or BusySpecific</param>
            <param name="callerAddress">Caller address</param>
            <param name="destinationCountryCode">Destination country code, zero for default</param>
            <param name="destinationAddress">Destination address</param>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.#ctor(JulMar.Atapi.ForwardingMode,JulMar.Atapi.AddressType,System.String,System.Int32,JulMar.Atapi.AddressType,System.String)">
            <summary>
            Constructor for specific forwarding call when caller or destination is not a phone number.
            </summary>
            <param name="mode">Forwarding mode - must be BusyNoAnswerSpecific, NoAnswerSpecific, UnconditionalSpecific or BusySpecific</param>
            <param name="callerType">Caller address type</param>
            <param name="callerAddress">Caller address</param>
            <param name="destinationCountryCode">Destination country code, zero for default</param>
            <param name="destinationType">Destination address type</param>
            <param name="destinationAddress">Destination address</param>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.ToString">
            <summary>
            Provides string implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.ProcessForwardList(JulMar.Atapi.ForwardInfo[])">
            <summary>
            This method converts an array of forwarding information instructions to a LINEFORWARDLIST array
            </summary>
            <param name="forwardInstructions">Input array</param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Atapi.ForwardInfo.ConvertToTapiStructure(System.Int32@)">
            <summary>
            This converts the managed version to the unmanaged version of the structure.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JulMar.Atapi.HookswitchCapabilities">
            <summary>
            This class models the capabilities for a hook switch device
            </summary>
        </member>
        <member name="M:JulMar.Atapi.HookswitchCapabilities.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.HookswitchCapabilities.ToString">
            <summary>
            Provides a textual representation of the hookswitch
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.Name">
            <summary>
            Name of the hook switch
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.IsPresent">
            <summary>
            True/False whether this hookswitch is present or not
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.AvailableModes">
            <summary>
            Returns the available hookswitch modes for this device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.SettableModes">
            <summary>
            Hookswitch devices which may be set
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.MonitorableModes">
            <summary>
            Hookswitch devices which may be monitored
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.CanGetVolume">
            <summary>
            Returns whether the volume can be determined
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.CanAdjustVolume">
            <summary>
            True if the volume can be adjusted on this hookswitch device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.CanGetGain">
            <summary>
            Returns whether this hookswitch gain can be determined
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.CanAdjustGain">
            <summary>
            True if the gain can be adjusted on this hookswitch device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.CanGetState">
            <summary>
            Returns whether the current hookswitch status can be determined
            </summary>
        </member>
        <member name="P:JulMar.Atapi.HookswitchCapabilities.CanAdjustState">
            <summary>
            Returns whether the hookswitch status can be changed
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ButtonLampInformation">
            <summary>
            This models a single button/lamp combination
            </summary>
        </member>
        <member name="M:JulMar.Atapi.ButtonLampInformation.#ctor(System.Int32,System.Int32,System.Int32,JulMar.Atapi.ButtonKey)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.ButtonLampInformation.ToString">
            <summary>
            Provides a textual representation of the button
            </summary>
            <returns>Button text</returns>
        </member>
        <member name="P:JulMar.Atapi.ButtonLampInformation.HasButton">
            <summary>
            Returns whether this button has a function or not (lamp-only)
            </summary>
        </member>
        <member name="P:JulMar.Atapi.ButtonLampInformation.HasLamp">
            <summary>
            Returns whether this has a lamp
            </summary>
        </member>
        <member name="P:JulMar.Atapi.ButtonLampInformation.Function">
            <summary>
            Returns the button function
            </summary>
        </member>
        <member name="P:JulMar.Atapi.ButtonLampInformation.Type">
            <summary>
            Returns the button type
            </summary>
        </member>
        <member name="P:JulMar.Atapi.ButtonLampInformation.LampStyles">
            <summary>
            Returns the lamp styles 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.ButtonLampInformation.Key">
            <summary>
            Returns the button key (if any)
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneCapabilities">
            <summary>
            This class holds the capabilities for a single phone device exposed by TAPI.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.PhoneCapabilities.#ctor(JulMar.Atapi.Interop.PHONECAPS,System.Byte[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.PhoneCapabilities.ToString">
            <summary>
            Returns a System.String that represents this object.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.PhoneCapabilities.ToString(System.String)">
            <summary>
            Formattable ToString
            </summary>
            <param name="format">Format</param>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.PhoneCapabilities.ToString(System.String,System.IFormatProvider)">
            <summary>
            This implementation provides a customizable formatter
            </summary>
            <param name="format">Format</param>
            <param name="formatProvider">Format provider (not used)</param>
            <returns>String</returns>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.ProviderInfo">
            <summary>
            This provides data about the provider hardware and/or software, such as the vendor name and version numbers of hardware and software.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.PhoneInfo">
            <summary>
            This provides data about the phone hardware and/or software, such as the vendor name and version numbers of hardware and software.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.PermanentPhoneId">
            <summary>
            Permanent identifier by which the phone device is known in the system's configuration.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.PhoneName">
            <summary>
            Name for the phone device. This name can be configured by the user when configuring the 
            line device's service provider, and is provided for the user's convenience
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.Guid">
            <summary>
            GUID permanently associated with the phone device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.AvailableDeviceClasses">
            <summary>
            Array of device class identifiers supported on one or more addresses on this phone.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.Handset">
            <summary>
            This returns the handset capabilities
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.Headset">
            <summary>
            This returns the headset capabilities
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.Speaker">
            <summary>
            This returns the speaker capabilities
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.RingerStyleCount">
            <summary>
            Returns the ringer style count
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.ButtonsLamps">
            <summary>
            This returns the list of buttons and lamps
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanGetButtonInfo">
            <summary>
            Supports retrieving button information on this phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanUploadData">
            <summary>
            Supports uploading data to buffers on the phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanGetLampState">
            <summary>
            Supports getting the current lamp state
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanGetRinger">
            <summary>
            Supports getting the current ringer
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanAdjustButtonInfo">
            <summary>
            Supports changing the button information (programmable buttons)
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanDownloadData">
            <summary>
            Supports downloading data from the phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanSetLampState">
            <summary>
            Supports changing the lamp state
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneCapabilities.CanSetRinger">
            <summary>
            Supports changing the ringer
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneStatus">
            <summary>
            This class holds the current phone status
            </summary>
        </member>
        <member name="M:JulMar.Atapi.PhoneStatus.ToString">
            <summary>
            Returns a System.String that represents this object.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.PhoneStatus.ToString(System.String)">
            <summary>
            Formattable ToString
            </summary>
            <param name="format">Format</param>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.PhoneStatus.ToString(System.String,System.IFormatProvider)">
            <summary>
            This implementation provides a customizable formatter
            </summary>
            <param name="format">Format</param>
            <param name="formatProvider">Format provider (not used)</param>
            <returns>String</returns>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.OwnerCount">
            <summary>
            Number of active opens on the phone device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.MonitorCount">
            <summary>
            Number of active opens on the phone device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.Connected">
            <summary>
            Specifies whether the phone is currently connected to TAPI. TRUE if connected, FALSE otherwise. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.Suspended">
            <summary>
            Specifies whether TAPI's manipulation of the phone device is suspended. TRUE if suspended, FALSE otherwise. 
            An application's use of a phone device can be temporarily suspended when the switch wants to manipulate the phone 
            in a way that cannot tolerate interference from the application. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.RingerMode">
            <summary>
            Current ring mode of a phone device - based on PhoneCapabilities.RingerCount
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.RingerVolume">
            <summary>
            Returns the current ringer volume
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanGetButtonInfo">
            <summary>
            Supports retrieving button information on this phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanUploadData">
            <summary>
            Supports uploading data to buffers on the phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanGetLampState">
            <summary>
            Supports getting the current lamp state
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanGetRinger">
            <summary>
            Supports getting the current ringer
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanAdjustButtonInfo">
            <summary>
            Supports changing the button information (programmable buttons)
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanDownloadData">
            <summary>
            Supports downloading data from the phone
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanSetLampState">
            <summary>
            Supports changing the lamp state
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneStatus.CanSetRinger">
            <summary>
            Supports changing the ringer
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneDisplay">
            <summary>
            This class represents a phone display device
            </summary>
        </member>
        <member name="M:JulMar.Atapi.PhoneDisplay.#ctor(JulMar.Atapi.TapiPhone,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Phone object</param>
            <param name="cols">Number of columns</param>
            <param name="rows">Number of rows</param>
            <param name="canChangeDisplay">True if the display is changable by the application</param>
        </member>
        <member name="M:JulMar.Atapi.PhoneDisplay.Invalidate">
            <summary>
            This is called to invalidate the display contents.  Typically when the
            device notifies us that the display has changed.  It will be retrieved again when
            the client application requests the text.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneDisplay.CanModify">
            <summary>
            This returns whether the phone display can be changed programatically.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneDisplay.Columns">
            <summary>
            Returns the number of columns on this device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneDisplay.Rows">
            <summary>
            Returns the number of rows on this device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneDisplay.Text">
            <summary>
            Returns the display text information
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneHookswitch">
            <summary>
            This class represents a phone hookswitch device
            </summary>
        </member>
        <member name="M:JulMar.Atapi.PhoneHookswitch.ToString">
            <summary>
            Provides a textual representation of the hookswitch device
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.Name">
            <summary>
            Returns the name of this hookswitch device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.Capabilities">
            <summary>
            Returns the capabilities for this hookswitch device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.CanChangeState">
            <summary>
            Returns whether the status of this hookswitch can be changed
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.CanChangeVolume">
            <summary>
            Returns whether the volume can be changed
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.CanChangeGain">
            <summary>
            Returns whether the gain can be changed
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.Status">
            <summary>
            Sets or Returns the full hookswitch status
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.Volume">
            <summary>
            Sets or Returns the current volume of the hookswitch
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneHookswitch.Gain">
            <summary>
            Sets or Returns the current gain of the hookswitch
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneButton">
            <summary>
            This class models a button
            </summary>
        </member>
        <member name="M:JulMar.Atapi.PhoneButton.ProcessButtonNotify(JulMar.Atapi.ButtonMode,JulMar.Atapi.ButtonState)">
            <summary>
            This method is called when the phone receives a PHONE_BUTTON event to update the
            current button status
            </summary>
            <param name="buttonMode">Button mode</param>
            <param name="buttonState">Button status</param>
        </member>
        <member name="M:JulMar.Atapi.PhoneButton.ToString">
            <summary>
            Provides a textual representation of the button
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.Id">
            <summary>
            Returns the assigned button/lamp id
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.HasButton">
            <summary>
            Returns whether this button has a function or not (lamp-only)
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.HasLamp">
            <summary>
            Returns whether this has a lamp
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.Function">
            <summary>
            Returns the button function
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.Type">
            <summary>
            Returns the button type
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.AvailableLampStyles">
            <summary>
            Returns the lamp styles 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.Key">
            <summary>
            Returns the button key (if any)
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.Text">
            <summary>
            The button text
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.State">
            <summary>
            Returns the current button state
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.LampState">
            <summary>
            Gets or sets the current lamp state
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PhoneButton.DeviceSpecificData">
            <summary>
            Returns the device specific data
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiPhone">
            <summary>
            This class represents a single phone device exposed by TAPI.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.Open">
            <summary>
            This opens the phone in OWNER mode
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.Monitor">
            <summary>
            This opens the phone in MONITOR mode - application seeks read-only access
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.Open(System.Int32)">
            <summary>
            This method opens the phone device and allows it to be interacted with.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.NegotiateExtensions(System.Int32,System.Int32,System.EventHandler{JulMar.Atapi.DeviceSpecificEventArgs})">
            <summary>
            This method is used to negotiate extension versions for the TSP.  It is only necessary if the application intends to use device-specific extensions.
            </summary>
            <param name="minVersion">Minimum version to negotiate to</param>
            <param name="maxVersion">Maximum version to negotiate to</param>
            <param name="dsc">Callback for any device-specific notification</param>
            <returns>Negotiated extensions version</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.GetAssociatedLine">
            <summary>
            Returns the line device associated with this phone.
            </summary>
            <returns>TapiLine</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.GetExternalDeviceInfo(System.String)">
            <summary>
            This returns a device identifier for the specified device class associated with the phone
            </summary>
            <param name="deviceClass">Device Class</param>
            <returns>string or byte[]</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.GetPhoneBuffer(System.Int32,System.Byte[])">
            <summary>
            This method retrieves the information from the specified phone buffer location in the open phone device to 
            the specified buffer
            </summary>
            <param name="id">Buffer id</param>
            <param name="buffer">Storage area for data - must be allocated</param>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.DevSpecific(System.Byte[])">
            <summary>
            This method sends information to the phoneDevSpecific function
            </summary>
            <param name="buffer">Data to put into buffer</param>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.SetPhoneBuffer(System.Int32,System.Byte[])">
            <summary>
            This method sets information into the specified phone buffer location in the open phone device from
            the specified buffer
            </summary>
            <param name="id">Buffer id</param>
            <param name="buffer">Data to put into buffer</param>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.ToString">
            <summary>
            Returns a System.String representing this phone object
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.Close">
            <summary>
            This closes the phone device.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiPhone.Dispose">
            <summary>
            This method disposes of resources owned by the phone device
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiPhone.PhoneStateChanged">
            <summary>
            This event is raised when a call on this address changes state.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiPhone.PhoneButtonPressed">
            <summary>
            This event is raised when a call on this address changes state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.IsValid">
            <summary>
            This returns whether the phone device is usable or not.  Removed phones are
            not usable and have no capabilities or properties.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Id">
            <summary>
            The numeric device ID representing the phone device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.PermanentId">
            <summary>
            The permanent numeric ID representing this phone device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.NegotiatedVersion">
            <summary>
            The <see cref="T:JulMar.Atapi.TapiVersion"/> that this line negotiated to.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Display">
            <summary>
            Returns the phone display information.  This can return null if no display
            is available for this device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Tag">
            <summary>
            This associates an arbitrary object with the line device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.DeviceSpecificExtensionID">
            <summary>
            This returns the available TSP device-specific extension ID.  It is the form of a string "a.b.c.d" and will be "0.0.0.0" if no
            device-specific extensions are present.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Name">
            <summary>
            Returns the Name associated with the phone.  It will never be empty.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Capabilities">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.PhoneCapabilities"/> object for this phone.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Status">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.PhoneStatus"/> object for this phone.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.IsOpen">
            <summary>
            Returns true/false whether the phone is currently open.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Handset">
            <summary>
            Provides access to the handset hookswitch device.  It may be null if no handset is present.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Headset">
            <summary>
            Provides access to the headset hookswitch device.  It may be null if no headset is present.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Speaker">
            <summary>
            Provides access to the speaker hookswitch device.  It may be null if no speaker is present.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiPhone.Buttons">
            <summary>
            Returns the buttons associated with the phone
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CustomTone">
            <summary>
            This structure contains information about a tone to be generated through <see cref="M:JulMar.Atapi.TapiCall.GenerateTone(JulMar.Atapi.ToneModes,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CustomTone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for the CustomTone
            </summary>
            <param name="frequency">Frequency of the tone</param>
            <param name="onDuration">Duration in milliseconds for the "on" portion</param>
            <param name="offDuration">Duration in milliseconds for the "off" portion</param>
            <param name="volume">Volume</param>
        </member>
        <member name="M:JulMar.Atapi.CustomTone.Equals(System.Object)">
            <summary>
            Override of the Equals method to provide an efficient implementation
            </summary>
            <param name="obj">Right side comparison</param>
            <returns>True/False</returns>
        </member>
        <member name="M:JulMar.Atapi.CustomTone.GetHashCode">
            <summary>
            Override of GetHashCode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:JulMar.Atapi.CustomTone.op_Equality(JulMar.Atapi.CustomTone,JulMar.Atapi.CustomTone)">
            <summary>
            Operator overload
            </summary>
            <param name="lhs">Left-hand side of comparison</param>
            <param name="rhs">Right-hand side of comparison</param>
            <returns>true/false</returns>
        </member>
        <member name="M:JulMar.Atapi.CustomTone.op_Inequality(JulMar.Atapi.CustomTone,JulMar.Atapi.CustomTone)">
            <summary>
            Operator overload
            </summary>
            <param name="lhs">Left-hand side of comparison</param>
            <param name="rhs">Right-hand side of comparison</param>
            <returns>true/false</returns>
        </member>
        <member name="P:JulMar.Atapi.CustomTone.Frequency">
            <summary>
            Frequency of this tone component, in hertz. A service provider may adjust (round up or down) the frequency specified by the application to fit its resolution.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CustomTone.CadenceOn">
            <summary>
            Length of the "on" duration of the cadence of the custom tone to be generated, in milliseconds. Zero means no tone is generated. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CustomTone.CadenceOff">
            <summary>
            Length of the "off" duration of the cadence of the custom tone to be generated, in milliseconds. Zero means no off time, that is, a constant tone. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CustomTone.Volume">
            <summary>
            Volume level at which the tone is to be generated. A value of 0x0000FFFF represents full volume, and a value of 0x00000000 is silence.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.MonitorTone">
            <summary>
            This structure describes a tone to be monitored.  This is passed to the <see cref="M:JulMar.Atapi.TapiCall.BeginMonitoringTones(JulMar.Atapi.MonitorTone[],System.EventHandler{JulMar.Atapi.ToneDetectedEventArgs})"/>.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Constructor for the MonitorTone structure
            </summary>
            <param name="duration">Duration of tone in milliseconds</param>
            <param name="frequency">First frequency of tri-tone</param>
            <param name="stateKey">State key for application (null for none)</param>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.#ctor(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Constructor for the MonitorTone structure
            </summary>
            <param name="duration">Duration of tone in milliseconds</param>
            <param name="frequency1">First frequency of tri-tone</param>
            <param name="frequency2">Second frequency of tri-tone</param>
            <param name="stateKey">State key for application (null for none)</param>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Constructor for the MonitorTone structure
            </summary>
            <param name="duration">Duration of tone in milliseconds</param>
            <param name="frequency1">First frequency of tri-tone</param>
            <param name="frequency2">Second frequency of tri-tone</param>
            <param name="frequency3">Third frequency of tri-tone</param>
            <param name="stateKey">State key for application (null for none)</param>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.Equals(System.Object)">
            <summary>
            Override of the Equals method to provide an efficient implementation
            </summary>
            <param name="obj">Right side comparison</param>
            <returns>True/False</returns>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.GetHashCode">
            <summary>
            Override of GetHashCode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.op_Equality(JulMar.Atapi.MonitorTone,JulMar.Atapi.MonitorTone)">
            <summary>
            Operator overload
            </summary>
            <param name="lhs">Left-hand side of comparison</param>
            <param name="rhs">Right-hand side of comparison</param>
            <returns>true/false</returns>
        </member>
        <member name="M:JulMar.Atapi.MonitorTone.op_Inequality(JulMar.Atapi.MonitorTone,JulMar.Atapi.MonitorTone)">
            <summary>
            Operator overload
            </summary>
            <param name="lhs">Left-hand side of comparison</param>
            <param name="rhs">Right-hand side of comparison</param>
            <returns>true/false</returns>
        </member>
        <member name="P:JulMar.Atapi.MonitorTone.Key">
            <summary>
            Identifies the tone to the application
            </summary>
        </member>
        <member name="P:JulMar.Atapi.MonitorTone.Duration">
            <summary>
            Duration of time during which the tone should be present before a detection is made, in milliseconds. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.MonitorTone.Frequency1">
            <summary>
            First frequency of the tone, in hertz. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.MonitorTone.Frequency2">
            <summary>
            Second frequency of the tone, in hertz. Can be zero.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.MonitorTone.Frequency3">
            <summary>
            Third frequency of the tone, in hertz. Can be zero.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiException">
            <summary>
            This class is used to bubble up underlying Tapi errors to the application
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiException.#ctor(System.String)">
            <summary>
            Standard exception
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:JulMar.Atapi.TapiException.#ctor(System.String,System.Exception)">
            <summary>
            Standard exception
            </summary>
            <param name="msg">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:JulMar.Atapi.TapiException.#ctor(System.String,System.Int64)">
            <summary>
            Tapi exception constructor
            </summary>
            <param name="msg">Message</param>
            <param name="rc">Tapi RC</param>
        </member>
        <member name="M:JulMar.Atapi.TapiException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
            Tapi exception constructor
            </summary>
            <param name="msg">Message</param>
            <param name="rc">Tapi RC</param>
            <param name="innerException">Inner Exception passed to base class</param>
        </member>
        <member name="M:JulMar.Atapi.TapiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="ctx">Streaming Context</param>
        </member>
        <member name="P:JulMar.Atapi.TapiException.Error">
            <summary>
            The TAPI error code reported by the TAPI api.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LocationInformation">
            <summary>
            This class represents all the collective location and translation information for the TAPI application
            </summary>
        </member>
        <member name="M:JulMar.Atapi.LocationInformation.GetCountryByCode(System.Int32)">
            <summary>
            This retrieves a <see cref="T:JulMar.Atapi.Country"/> object using the country code.
            </summary>
            <param name="countryCode">Country code to locate</param>
            <returns>Country object</returns>
        </member>
        <member name="P:JulMar.Atapi.LocationInformation.Countries">
            <summary>
            This returns a list of the countries supported by TAPI.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LocationInformation.CallingCards">
            <summary>
            Returns the defined calling cards
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LocationInformation.CallingLocations">
            <summary>
            This returns a list of available calling locations for this server
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LocationInformation.CurrentLocation">
            <summary>
            This gets and sets the current calling location for address translation
            </summary>
        </member>
        <member name="T:JulMar.Atapi.MakeCallParams">
            <summary>
            This class holds optional data for MakeCall to use to place a call
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.BearerMode">
            <summary>
            Value that specifies the bearer mode for the call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.MinRate">
            <summary>
            Value that specifies the data rate range requested for the call's data stream in bps (bits per second).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.MaxRate">
            <summary>
            Value that specifies the data rate range requested for the call's data stream in bps (bits per second).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.MediaMode">
            <summary>
            Requested media mode for the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.OriginationAddress">
            <summary>
            Origination address
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.TargetAddress">
            <summary>
            Target address (used for SetupConference, SetupTransfer and PrepareAddToConference)
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.UserUserInfo">
            <summary>
            UserUser data to be passed along the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.NoAnswerTimeout">
            <summary>
            Number of seconds, after the completion of dialing, that the call should wait in the PROCEEDING or RINGBACK state, 
            before abandoned by the service provider with a LINECALLSTATE_DISCONNECTED and LINEDISCONNECTMODE_NOANSWER. A value of zero indicates 
            that the application does not desire automatic call abandonment. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.DialPause">
            <summary>
            Duration of a comma in the dialable address, in milliseconds. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.DialSpeed">
            <summary>
            Interdigit time period between successive digits, in milliseconds.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.DigitDuration">
            <summary>
            Duration of a digit, in milliseconds. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.WaitForDialtoneDuration">
            <summary>
            Maximum amount of time to wait for a dial tone when a 'W' is used in the dialable address, in milliseconds. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.BlockCallerId">
            <summary>
            The originator identity should be concealed (block caller ID).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.TakeDestinationOffhook">
            <summary>
            The called party's phone should be automatically taken offhook.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.TakeOriginationOffhook">
            <summary>
            The caller party's phone should be automatically taken offhook.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.WantPredictiveDialing">
            <summary>
            This flag is used only when placing a call on an address with predictive dialing capability 
            (LINEADDRCAPFLAGS_PREDICTIVEDIALER is on in the dwAddrCapFlags member in LINEADDRESSCAPS). 
            The flag must be on to enable the enhanced call progress and/or media device monitoring capabilities 
            of the device. If this bit is not on, the call will be placed without enhanced call progress or 
            media type monitoring, and no automatic transfer will be initiated based on call state. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.OriginateOnIdleCall">
            <summary>
            The call should be originated on an idle call appearance and not join a call in progress. 
            When using the lineMakeCall function, if the IDLE value is not set and there is an existing call 
            on the line, the function breaks into the existing call if necessary to make the new call. 
            If there is no existing call, the function makes the new call as specified
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MakeCallParams.WantSecureCall">
            <summary>
            The call should be set up as secure. 
            </summary>
        </member>
        <member name="M:JulMar.Atapi.MakeCallParams.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JulMar.Atapi.NumberInfo">
            <summary>
            This class is returned from the <see cref="M:JulMar.Atapi.TapiLine.TranslateNumber(System.String,JulMar.Atapi.TranslationOptions)"/> method as the resultant translated number.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.NumberInfo.DisplayNumber">
            <summary>
            The number that can be displayed to the user for confirmation.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.NumberInfo.DialableNumber">
            <summary>
            The translated output that can be passed to the MakeCall, Dial, or other function requiring a dialable string. 
            Ancillary fields such as name and subaddress are included in this output string if they were in the input string. 
            This string may contain private information such as calling card numbers. It should not be displayed to the user, 
            to prevent inadvertent visibility to unauthorized persons
            </summary>
        </member>
        <member name="F:JulMar.Atapi.NumberInfo.DestinationCountry">
            <summary>
            The destination country if available (may be null).
            </summary>
        </member>
        <member name="M:JulMar.Atapi.NumberInfo.#ctor(JulMar.Atapi.Interop.LINETRANSLATEOUTPUT,System.Byte[],JulMar.Atapi.LocationInformation)">
            <summary>
            Constructor
            </summary>
            <param name="lto">Translation output</param>
            <param name="buff">Raw buffer</param>
            <param name="locInfo"><see cref="T:JulMar.Atapi.LocationInformation"/></param>
        </member>
        <member name="T:JulMar.Atapi.PendingTapiRequest">
            <summary>
            This class implements the AsyncRequest support through IAsyncResult
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PendingTapiRequest.Result">
            <summary>
            Result code from request
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PendingTapiRequest.Elapsed">
            <summary>
            Total elapsed time for the request
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PendingTapiRequest.ElapsedMilliseconds">
            <summary>
            Total elapsed time in milliseconds for the request
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PendingTapiRequest.AsyncState">
            <summary>
            Async state object
            </summary>
        </member>
        <member name="P:JulMar.Atapi.PendingTapiRequest.AsyncWaitHandle">
            <summary>
            Async Wait Handle
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallFeatureSet">
            <summary>
            This class holds the Call Features for a given <see cref="T:JulMar.Atapi.TapiCall"/> or <see cref="T:JulMar.Atapi.TapiAddress"/>.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallFeatureSet.ToString">
            <summary>
            Returns a System.String representing this call object
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanAccept">
            <summary>
            Accept the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanAddToConference">
            <summary>
            Add the call to the conference
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanAnswer">
            <summary>
            Answer the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanBlindTransfer">
            <summary>
            Blind transfer the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanCompleteCall">
            <summary>
            Complete the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanCompleteTransfer">
            <summary>
            Complete a 2-step transfer of the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanDial">
            <summary>
            Dial additional digits on the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanDrop">
            <summary>
            Drop the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanGatherDigits">
            <summary>
            Gather DTMF digits on the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanGenerateDigits">
            <summary>
            Generate DTMF digits
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanGenerateTone">
            <summary>
            Generate tones
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanHold">
            <summary>
            Place the call on hold
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanMonitorDigits">
            <summary>
            Monitor digits on the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanMonitorMedia">
            <summary>
            Monitor media changes on the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanMonitorTones">
            <summary>
            Monitor tones on the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanPark">
            <summary>
            Park the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanPrepareAddToConference">
            <summary>
            Prepare to add the call to a conference
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanRedirect">
            <summary>
            Redirect the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanRemoveFromConference">
            <summary>
            Remove the call from a conference
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSecureCall">
            <summary>
            Secure the call from outside interference
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSendUserUserInfo">
            <summary>
            Send OOB UUI to the peer.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetCallParams">
            <summary>
            Set call parameters on the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetMediaControl">
            <summary>
            Change media control for the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetTerminal">
            <summary>
            Set/Change terminal information
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetupConference">
            <summary>
            Setup a conference for the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetupTransfer">
            <summary>
            Initiate a 2-step transfer
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSwapHold">
            <summary>
            Swap the call with a held/active call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanUnhold">
            <summary>
            Bring the call off hold
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanReleaseUserUserInfo">
            <summary>
            Release OOB UUI data associated with the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetTreatment">
            <summary>
            Change the call treatment
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetQos">
            <summary>
            Set the Quality of Service associated with the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.CallFeatureSet.CanSetCallData">
            <summary>
            Set call data to travel with the call appearance
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiCall">
            <summary>
            This class represents a single 1st party call in Tapi.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiCall._syncLci">
            <summary>
            used to synchronize mutex access to last LINECALLINFO data 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiCall._lci">
            <summary>
            Store last LINECALLINFO instance retrieved in <see cref="M:JulMar.Atapi.TapiCall.GatherCallInfo"/>.
            </summary>
            <remarks>Access to this ref is allowed only to read a single members at once.
            If more than one members has to read ad once, use GetLastLineCallInfo()/&gt;</remarks>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetLastLineCallInfo(JulMar.Atapi.Interop.LINECALLINFO@,System.Byte[]@)">
            <summary>
            Safely returns a copy to last LINECALLINFO and its byte[] data
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SetCallParams(System.String,JulMar.Atapi.BearerModes,System.Int32,System.Int32,JulMar.Atapi.Interop.LINEDIALPARAMS)">
            <summary>
            Internal method to set call parameters
            </summary>
            <param name="param">Name of the parameter</param>
            <param name="bmode"></param>
            <param name="minRate"></param>
            <param name="maxRate"></param>
            <param name="ldp"></param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.ToString">
            <summary>
            Returns a System.String represnting this Tapi line object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Accept(System.Byte[])">
            <summary>
            This function accepts the specified offered call. It can optionally send the specified user-user information to the calling party.
            </summary>
            <param name="uuInfo">Buffer containing user-user information to be sent to the remote party as part of the call accept or null if no user-user information is to be sent.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Accept">
            <summary>
            This function accepts the specified offered call. It can optionally send the specified user-user information to the calling party.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            This function accepts the specified offered call. It can optionally send the specified user-user information to the calling party.
            </summary>
            <param name="acb">AsyncCallback method</param>
            <param name="state">State data</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginAccept(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            This function accepts the specified offered call. It can optionally send the specified user-user information to the calling party.
            </summary>
            <param name="uuInfo">Buffer containing user-user information to be sent to the remote party as part of the call accept or null if no user-user information is to be sent.</param>
            <param name="acb">AsyncCallback method</param>
            <param name="state">State data</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndAccept(System.IAsyncResult)">
            <summary>
            This retrieves the results of a previously issued <seealso cref="M:JulMar.Atapi.TapiCall.BeginAccept(System.Byte[],System.AsyncCallback,System.Object)"/> method.
            </summary>
            <param name="ar">IAsyncResult from the BeginAccept call.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.AddToConference(JulMar.Atapi.TapiCall)">
            <summary>
            This adds the call to the existing conference.  The current call must be a
            conference call and in the proper call state.
            </summary>
            <param name="callToAdd">Call to add to this conference</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginAddToConference(JulMar.Atapi.TapiCall,System.AsyncCallback,System.Object)">
            <summary>
            This adds the call to the existing conference.  The current call must be a
            conference call and in the proper call state.
            </summary>
            <param name="callToAdd">Call to add to this conference</param>
            <param name="acb">Callback function</param>
            <param name="state">State parameter</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndAddToConference(System.IAsyncResult)">
            <summary>
            This ends an asynchronous AddToConference.
            </summary>
            <param name="ar">Pending IAsyncResult request</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Answer(System.Byte[])">
            <summary>
            This function answers the specified offering call. 
            </summary>
            <param name="uuInfo">Buffer containing user-user information to be sent to the remote party as part of the call answer or null if no user-user information is to be sent.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Answer">
            <summary>
            This function answers the specified offering call. 
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginAnswer(System.AsyncCallback,System.Object)">
            <summary>
            This function answers the specified offering call. 
            </summary>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginAnswer(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            This function answers the specified offering call. 
            </summary>
            <param name="uuInfo">Buffer containing user-user information to be sent to the remote party as part of the call answer or null if no user-user information is to be sent.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndAnswer(System.IAsyncResult)">
            <summary>
            Harvests the results from a previously issued <seealso cref="M:JulMar.Atapi.TapiCall.BeginAnswer(System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginAnswer</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BlindTransfer(System.String,System.Int32)">
            <summary>
            Performs a single-step (blind) transfer of the call to a target number.
            </summary>
            <param name="destAddress">Destinationa address</param>
            <param name="countryCode">Country code or zero for default.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginBlindTransfer(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Performs a single-step (blind) transfer of the call to a target number.
            </summary>
            <param name="destAddress">Destinationa address</param>
            <param name="countryCode">Country code or zero for default.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndBlindTransfer(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginBlindTransfer(System.String,System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginBlindTransfer</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CompleteCall(JulMar.Atapi.CallCompletionMode,System.Int32)">
            <summary>
            Specifies how a call that could not be connected normally should be completed instead. The network or switch may not be able to 
            complete a call because network resources are busy or the remote station is busy or doesn't answer. The application can request that 
            the call be completed in one of a number of ways.
            </summary>
            <param name="mode">Completion mode</param>
            <param name="messageIndex">Message Id if sending message - this is the index of the <see cref="P:JulMar.Atapi.AddressCapabilities.AvailableCallCompletionMessages"/> entry.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginCompleteCall(JulMar.Atapi.CallCompletionMode,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Specifies how a call that could not be connected normally should be completed instead. The network or switch may not be able to 
            complete a call because network resources are busy or the remote station is busy or doesn't answer. The application can request that 
            the call be completed in one of a number of ways.
            </summary>
            <param name="mode">Completion mode</param>
            <param name="messageId">Message Id if sending message</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndCompleteCall(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginCompleteCall(JulMar.Atapi.CallCompletionMode,System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginCompleteCall</param>
            <returns>Completion Id</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Dial(System.String,System.Int32)">
            <summary>
            Dials digits on the call
            </summary>
            <param name="destAddress">Destination address</param>
            <param name="countryCode">Country code or zero for default.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginDial(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Dials digits on the call
            </summary>
            <param name="destAddress">Destination address</param>
            <param name="countryCode">Country code or zero for default.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndDial(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginDial(System.String,System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginDial</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.DeviceSpecific(System.Byte[])">
            <summary>
            This method executes device-specific functionality on the underlying service provider.
            </summary>
            <param name="inData">Input data</param>
            <returns>Output data</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginDeviceSpecific(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            This method executes device-specific functionality on the underlying service provider.
            </summary>
            <param name="inData">Input data</param>
            <param name="acb">Callback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndDeviceSpecific(System.IAsyncResult)">
            <summary>
            This method harvests the results from a <see cref="M:JulMar.Atapi.TapiAddress.BeginDeviceSpecific(System.Byte[],System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginDeviceSpecific</param>
            <returns>Output data</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Drop(System.Byte[])">
            <summary>
            Drops the active call
            </summary>
            <param name="uuInfo">Buffer containing user-user information to be sent to the remote party as part of the call drop or null if no user-user information is to be sent.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Drop">
            <summary>
            Drops the active call
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginDrop(System.AsyncCallback,System.Object)">
            <summary>
            Drops the active call
            </summary>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginDrop(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Drops the active call
            </summary>
            <param name="uuInfo">Buffer containing user-user information to be sent to the remote party as part of the call drop or null if no user-user information is to be sent.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndDrop(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginDrop(System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GatherDigits(JulMar.Atapi.DigitModes,System.Int32,System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            Gathers digits from the call until an end condition is met.
            </summary>
            <param name="digitModes">Digit mode(s) to be monitored</param>
            <param name="maxDigits">Number of digits to be collected</param>
            <param name="termDigits">List of termination digits. If one of the digits in the string is detected, that termination digit is appended to the buffer and digit collection is terminated</param>
            <param name="firstDigitTimeout">Time duration in milliseconds in which the first digit is expected</param>
            <param name="interDigitTimeout">Maximum time duration in milliseconds between consecutive digits.</param>
            <param name="digits">Buffer to return digits</param>
            <returns>Completion reason</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginGatherDigits(JulMar.Atapi.DigitModes,System.Int32,System.String,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Gathers digits from the call until an end condition is met.
            </summary>
            <param name="digitModes">Digit mode(s) to be monitored</param>
            <param name="maxDigits">Number of digits to be collected</param>
            <param name="termDigits">List of termination digits. If one of the digits in the string is detected, that termination digit is appended to the buffer and digit collection is terminated</param>
            <param name="firstDigitTimeout">Time duration in milliseconds in which the first digit is expected</param>
            <param name="interDigitTimeout">Maximum time duration in milliseconds between consecutive digits.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">Object state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndGatherDigits(System.IAsyncResult,System.String@)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginGatherDigits(JulMar.Atapi.DigitModes,System.Int32,System.String,System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginGatherDigits</param>
            <param name="digits">Buffer to return digits</param>
            <returns>Completion reason</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CancelGatherDigits">
            <summary>
            This method cancels a previously request digit gather.  The <see cref="M:JulMar.Atapi.TapiCall.EndGatherDigits(System.IAsyncResult,System.String@)"/> may then be called.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GenerateDigits(JulMar.Atapi.DigitModes,System.String,System.Int32)">
            <summary>
            This method generates DTMF digits on the call.
            </summary>
            <param name="digitMode">Format to be used for signaling these digits.</param>
            <param name="digits">Buffer of digits to be generated.</param>
            <param name="duration">Both the duration in milliseconds of DTMF digits and pulse and DTMF inter-digit spacing. A value of 0 uses a default value.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginGenerateDigits(JulMar.Atapi.DigitModes,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This method generates DTMF digits on the call.
            </summary>
            <param name="digitMode">Format to be used for signaling these digits.</param>
            <param name="digits">Buffer of digits to be generated.</param>
            <param name="duration">Both the duration in milliseconds of DTMF digits and pulse and DTMF inter-digit spacing. A value of 0 uses a default value.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">Object state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndGenerateDigits(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginGenerateDigits(JulMar.Atapi.DigitModes,System.String,System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginGenerateDigits</param>
            <returns>true/false success</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CancelGenerateDigits">
            <summary>
            This method cancels a digit generation request.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GenerateTone(JulMar.Atapi.ToneModes,System.Int32)">
            <summary>
            This method generates the specified inband tone over the specified call.
            </summary>
            <param name="toneMode">Format to be used for tone.</param>
            <param name="duration">Duration in milliseconds during which the tone should be sustained. A value of 0 for dwDuration uses a default duration for the specified tone.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GenerateTone(JulMar.Atapi.CustomTone[],System.Int32)">
            <summary>
            This method generates the specified custom tone inband over the specified call.
            </summary>
            <param name="tones">Array of custom tones to generate</param>
            <param name="duration">Duration of tone generation</param>
            <returns>True/False</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginGenerateTone(JulMar.Atapi.ToneModes,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This method generates the specified inband tone over the specified call.
            </summary>
            <param name="toneMode">Format to be used for tone.</param>
            <param name="duration">Duration in milliseconds during which the tone should be sustained. A value of 0 for dwDuration uses a default duration for the specified tone.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">Object state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginGenerateTone(JulMar.Atapi.CustomTone[],System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This method generates the specified inband tone over the specified call.
            </summary>
            <param name="tones">Array of custom tones to generate</param>
            <param name="duration">Length of tone generation</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">Object state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndGenerateTone(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiCall.BeginGenerateTone(JulMar.Atapi.ToneModes,System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginGenerateTone</param>
            <returns>true/false success</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CancelGenerateTone">
            <summary>
            This method cancels a tone generation request.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetRelatedConferenceCalls">
            <summary>
            This returns the list of related conference call parties that are part of the same conference call as this call. 
            The specified call is either a conference call or a participant call in a conference call. 
            New handles are generated for those calls for which the application does not already have handles, 
            and the application is granted monitor privilege to those calls. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetExternalDeviceInfo(System.String)">
            <summary>
            This returns a device identifier for the specified device class associated with the call
            </summary>
            <param name="deviceClass">Device Class</param>
            <returns>string or byte[]</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetCommHandle">
            <summary>
            This returns the underlying COMM handle for the given call.  This is primarily for modem-style lines.
            </summary>
            <returns>SafeHandle representing COMM handle or null</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetCommStream">
            <summary>
            This method returns a FileStream to represent our I/O channel
            with the COMM port.  It is always in asynch mode.
            </summary>
            <returns>FileStream object</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetCommDevice">
            <summary>
            This returns the name of the COMM device this call is running on
            </summary>
            <returns>String representing COM port or null</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetDeviceID(System.String)">
            <summary>
            Returns a device ID handle from an identifier.
            </summary>
            <param name="identifier">Identifier to lookup</param>
            <returns>Handle or null</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetWaveInDeviceID">
            <summary>
            Returns the device id for the wave input device.  This identifier may be passed to "waveInOpen" to get a HWAVE handle.
            </summary>
            <returns>Wave Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetWaveOutDeviceID">
            <summary>
            Returns the device id for the wave output device.  This identifier may be passed to "waveOutOpen" to get a HWAVE handle.
            </summary>
            <returns>Wave Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetMidiInDeviceID">
            <summary>
            Returns the device id for the MIDI input device.  This identifier may be passed to "midiInOpen" to get a HMIDI handle.
            </summary>
            <returns>MIDI Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetMidiOutDeviceID">
            <summary>
            Returns the device id for the MIDI output device.  This identifier may be passed to "midiOutOpen" to get a HMIDI handle.
            </summary>
            <returns>MIDI Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Hold">
            <summary>
            Places the call on hold
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginHold(System.AsyncCallback,System.Object)">
            <summary>
            Places the call on hold
            </summary>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAscyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndHold(System.IAsyncResult)">
            <summary>
            Retrieves the final result from a <see cref="M:JulMar.Atapi.TapiCall.BeginHold(System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginHold</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginMonitoringDigits(JulMar.Atapi.DigitModes,System.EventHandler{JulMar.Atapi.DigitDetectedEventArgs})">
            <summary>
            Enables the unbuffered detection of digits received on the call. Each time a digit of the specified digit mode is detected, a 
            callback event is raised in the application indicating which digit has been detected.
            </summary>
            <param name="modes">DigitModes to detect</param>
            <param name="acb">Callback to use</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.OnDigitDetected(System.Int32,System.Int32)">
            <summary>
            This is called when a digit is detected on the call.
            </summary>
            <param name="digit">Detected digit</param>
            <param name="digitMode">Detected mode</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CancelMonitoringDigits">
            <summary>
            This cancels any digit monitor enabled on this call.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginMonitoringTones(JulMar.Atapi.MonitorTone[],System.EventHandler{JulMar.Atapi.ToneDetectedEventArgs})">
            <summary>
            Enables the detection of inband tones on the call. Each time a specified tone is detected, a message is sent to the application.
            </summary>
            <param name="tones">List of tones to watch for</param>
            <param name="acb">Callback</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.OnToneDetected(System.Int32)">
            <summary>
            This is called when a tone is detected
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CancelMonitoringTones">
            <summary>
            This is used to cancel a tone monitor request.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Park(System.String)">
            <summary>
            Parks the call at the directed address
            </summary>
            <param name="address">Number to park the call at</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Park">
            <summary>
            Parks the call at a non-directed address and returns where it was parked.
            </summary>
            <returns>Park address</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginPark(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Parks the call at the directed address
            </summary>
            <param name="address">Number to park the call at</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginPark(System.AsyncCallback,System.Object)">
            <summary>
            Parks the call at a non-directed address
            </summary>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndPark(System.IAsyncResult)">
            <summary>
            Retrieves the result of a <see cref="M:JulMar.Atapi.TapiCall.BeginPark(System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginPark</param>
            <returns>Non-directed park address if available</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.PrepareAddToConference(JulMar.Atapi.MakeCallParams)">
            <summary>
            This function gets a consultation call from a conference in order to add a new party to the conference
            </summary>
            <param name="mcp">Optional call parameters for the consultation call.  You can perform an auto conference by supplying a TargetAddress.</param>
            <returns>Consultation call</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Redirect(System.String,System.Int32)">
            <summary>
            Redirects the specified offering call to the specified destination address
            </summary>
            <param name="destAddress">Address to redirect to</param>
            <param name="countryCode">Country code (zero for default)</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginRedirect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Redirects the specified offering call to the specified destination address
            </summary>
            <param name="destAddress">Address to redirect to</param>
            <param name="countryCode">Country code (zero for default)</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndRedirect(System.IAsyncResult)">
            <summary>
            Harvests the results from a call to <see cref="M:JulMar.Atapi.TapiCall.BeginRedirect(System.String,System.Int32,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="ar">IAsyncResult from BeginRedirect</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.ClearUserUserInfo">
            <summary>
            This function informs the service provider that the application has processed the user-user information contained in the call, and that subsequently 
            received user-user information can now be written into that structure. 
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.RemoveFromConference(JulMar.Atapi.TapiCall)">
            <summary>
            This removes a call from the existing conference.  The current call must be a
            conference call and in the proper call state.
            </summary>
            <param name="callToRemove">Call to remove from this conference</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginRemoveToConference(JulMar.Atapi.TapiCall,System.AsyncCallback,System.Object)">
            <summary>
            This removes a call from the existing conference.  The current call must be a
            conference call and in the proper call state.
            </summary>
            <param name="callToRemove">Call to remove from this conference</param>
            <param name="acb">Callback function</param>
            <param name="state">State parameter</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndRemoveFromConference(System.IAsyncResult)">
            <summary>
            This ends an asynchronous RemoveFromConference.
            </summary>
            <param name="ar">Pending IAsyncResult request</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SecureCall">
            <summary>
            Secures the call from any interruptions or interference that can affect the call's media stream.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginSecureCall(System.AsyncCallback,System.Object)">
            <summary>
            Secures the call from any interruptions or interference that can affect the call's media stream.
            </summary>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAscyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndSecureCall(System.IAsyncResult)">
            <summary>
            Retrieves the final result from a <see cref="M:JulMar.Atapi.TapiCall.BeginSecureCall(System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginHold</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SendUserUserInfo(System.String)">
            <summary>
            This method sends user-user information to the remote party on the specified call.
            </summary>
            <param name="message">Message to send</param>
            <returns>true/false success</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SetCallTreatment(JulMar.Atapi.CallTreatment)">
            <summary>
            This method sets the sounds a party on a call that is unanswered or on hold hears.
            </summary>
            <param name="ct">Designated call treatment type</param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SetupConference(System.Int32,JulMar.Atapi.MakeCallParams,JulMar.Atapi.TapiCall@)">
            <summary>
            This method is used to establish a conference call
            </summary>
            <param name="conferenceCount"># of parties anticipated the conference</param>
            <param name="mcp">Call parameters for created consultation call</param>
            <param name="consultCall">Returning consultation call</param>
            <returns>Conference call</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SetupTransfer(JulMar.Atapi.MakeCallParams)">
            <summary>
             This function initiates a transfer of the call through the use of a consultation call on which the party can be dialed that can 
            become the destination of the transfer. The application acquires owner privilege to the returned call.
            </summary>
            <param name="param">Optional call parameters for the returned consultation call.  You can perform a one-step transfer by supplying a TargetAddress</param>
            <returns>Consultation call</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CompleteTransfer(JulMar.Atapi.TapiCall)">
            <summary>
            This function completes the transfer of the specified call to the party connected in the consultation call.
            </summary>
            <param name="consultationCall">Consultation call to transfer to</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.CompleteTransferToConference(JulMar.Atapi.TapiCall)">
            <summary>
            This function completes a transfer by conferencing the two parties together.
            </summary>
            <param name="consultationCall">The second call to conference in with this one.</param>
            <returns>Conference call</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.SwapHold(JulMar.Atapi.TapiCall)">
            <summary>
            Swaps two calls from active to on hold
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginSwapHold(JulMar.Atapi.TapiCall,System.AsyncCallback,System.Object)">
            <summary>
            Swaps two calls from active to on hold
            </summary>
            <param name="otherCall">Call to swap with</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAscyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndSwapHold(System.IAsyncResult)">
            <summary>
            Retrieves the final result from a <see cref="M:JulMar.Atapi.TapiCall.BeginSwapHold(JulMar.Atapi.TapiCall,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginSwapHold</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Unhold">
            <summary>
            Retrieves a call that is holding
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.BeginUnhold(System.AsyncCallback,System.Object)">
            <summary>
            Retrieves a call that is holding
            </summary>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAscyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.EndUnhold(System.IAsyncResult)">
            <summary>
            Retrieves the final result from a <see cref="M:JulMar.Atapi.TapiCall.BeginUnhold(System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginUnhold</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.GetCallsById(System.Int32)">
            <summary>
            This returns an array of calls by call-id.  Warning - it can return calls across lines and providers.
            </summary>
            <param name="callId">Callid</param>
            <returns>Array of call objects</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.OnGenerateDigitsOrToneComplete(System.Int32)">
            <summary>
            This is invoked when the digits or tone are completed or canceled.
            </summary>
            <param name="reason">Reason code</param>
        </member>
        <member name="M:JulMar.Atapi.TapiCall.Dispose">
            <summary>
            IDisposable.Dispose implementation
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallHandle">
            <summary>
            This returns the underlying HTCALL which you can use in your
            own interop scenarios to deal with custom methods or places
            which are not wrapped by ATAPI
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.Address">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.TapiAddress"/> associated with the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.Line">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.TapiLine"/> associated with the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallState">
            <summary>
            Returns the current call state for the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallOrigin">
            <summary>
            Returns the call origin information
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallReason">
            <summary>
            Returns the call reason information
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.LastEventTime">
            <summary>
            Returns the time/date that the last status change occurred.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallData">
            <summary>
            Gets and sets the CallData associated with the call. Depending on the service provider implementation, the CallData member can be propagated to all 
            applications having handles to the call, including those on other machines (through the server), and can travel with the call when it is transferred.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.Id">
            <summary>
            In some telephony environments, the switch, or service provider can assign a unique identifier to each call. 
            This enables the call to be tracked across transfers, forwards, or other events. The domain of these call identifiers 
            and their scope is service provider-defined. The dwCallID member makes this unique identifier available to the applications. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.RelatedId">
            <summary>
            Returns any related numeric call id
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.TrunkId">
            <summary>
            Number of the trunk over which the call is routed. This will be 0xffffffff if unknown.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.DataRate">
            <summary>
            Rate of the call data stream, in bits per second (bps).
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.BearerMode">
            <summary>
            Value that specifies the current bearer mode of the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.MediaMode">
            <summary>
            Value that specifies the media mode of the data stream currently on the call. This is the media mode determined by the owner of the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.AppSpecificData">
            <summary>
            Enables an application to get/set the application-specific field of the specified call's call-information record
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.UserUserInfo">
            <summary>
            This retrieves the user-user information which can be passed along the wire on some telephony systems.
            It returns an empty string if no UUI exists for this call.  You can use <see cref="M:JulMar.Atapi.TapiCall.SendUserUserInfo(System.String)"/> to send data.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.Features">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.CallFeatureSet"/> representing the available features for the call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.Privilege">
            <summary>
            Retrieve or set the application's privilege to this call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallerId">
            <summary>
            Returns the caller ID number
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CallerName">
            <summary>
            Returns the caller ID name or empty string
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CalledId">
            <summary>
            Returns the called ID number
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.CalledName">
            <summary>
            Returns the called ID name or empty string.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.ConnectedId">
            <summary>
            Returns the connected ID number.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.ConnectedName">
            <summary>
            Returns the connected ID name or empty string.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.RedirectingId">
            <summary>
            Returns the redirecting ID number.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.RedirectingName">
            <summary>
            Returns the redirecting ID name or empty string.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.RedirectionId">
            <summary>
            Returns the redirection ID number
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.RedirectionName">
            <summary>
            Returns the redirection ID name or empty string.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.MediaDetection">
            <summary>
            This turns media detection on and off.  It is enabled by default, but can be turned off to avoid computational overhead when 
            media detection is not required.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.DialPause">
            <summary>
            Duration of a comma in the dialable address, in milliseconds. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.DialSpeed">
            <summary>
            Interdigit time period between successive digits, in milliseconds.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.DigitDuration">
            <summary>
            Duration of a digit, in milliseconds. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.WaitForDialtoneDuration">
            <summary>
            Maximum amount of time to wait for a dial tone when a 'W' is used in the dialable address, in milliseconds. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.Tag">
            <summary>
            This associates an arbitrary object with the call
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiCall.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this call
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AddressCapabilities">
            <summary>
            This class wraps the capabilities for a single <see>TapiAddress</see> object.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.AddressCapabilities.#ctor(JulMar.Atapi.Interop.LINEADDRESSCAPS,System.Byte[],System.Int32)">
            <summary>
            Constructor for the AddressCapabilties
            </summary>
            <param name="lac"></param>
            <param name="rawBuffer"></param>
            <param name="stringFormat"></param>
        </member>
        <member name="M:JulMar.Atapi.AddressCapabilities.ToString">
            <summary>
            Returns a System.String that represents the current AddressCapabilities object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.CallFeatures">
            <summary>
            The features that are possibly available to calls on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.DialableAddress">
            <summary>
            The Dialable number associated with this address.  This may be blank.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.RemoveFromConferenceState">
            <summary>
            This returns the state of any call removed from a conference
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.RemoveFromConferenceTypes">
            <summary>
            This returns whether calls may be removed from conferences on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SharingMode">
            <summary>
            The address sharing mode (bridged, private, monitored).
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.ValidCallStates">
            <summary>
            The valid call states for calls on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportedDialtoneModes">
            <summary>
            The supported dialtone types which may be reported when a call is in the dialtone state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportedBusyModes">
            <summary>
            The supported busy tone types which may be reported when a call is in the busy state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportedConnectModes">
            <summary>
            The supported connect mode types which may be reported when a call is in the connected state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportedOfferingModes">
            <summary>
            The supported offering mode types which may be reported when a call is in the ringing state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportedDisconnectModes">
            <summary>
            The types of disconnects which can occur.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportsDirectedPark">
            <summary>
            Returns the types of parked calls this address can manage
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportsNonDirectedPark">
            <summary>
            Returns the types of parked calls this address can manage
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportsPredictiveDialing">
            <summary>
            Returns whether this address supports predictive dialing or not.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.SupportedForwardingModes">
            <summary>
            The types of forwarding supported on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxForwardEntries">
            <summary>
            Returns the maximum number of forwarding entries allowed.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxActiveCallCount">
            <summary>
            The maximum number of calls which may be active simultaneously on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxNumOnHoldCallCount">
            <summary>
            The maximum number of calls which can be on hold simultaneously.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxNumOnHoldPendingTransferCallCount">
            <summary>
            The maximum number of calls which can be on hold pending a transfer simultaneously.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxNumTransferToConferenceCallCount">
            <summary>
            The maximum number of calls which can be transferred into a conference state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxNumPartiesInConferenceCount">
            <summary>
            The maximum number of parties in a conference on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.MaxCallDataSize">
            <summary>
            The maximum size for any CallData on a call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.AvailableCallTreatments">
            <summary>
            This returns the list of available call treatments for calls on this address, or null if none are available.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.AvailableCallCompletionMessages">
            <summary>
            This returns the array of call completion messages which can be applied
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressCapabilities.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this line
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AddressStatus">
            <summary>
            This class wraps the current status for a single <see>TapiAddress</see> object.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.AddressStatus.ToString">
            <summary>
            Returns a System.String that represents the current AddressStatus object.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.InUseCount">
            <summary>
            The in use count.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.ActiveCallCount">
            <summary>
            Number of active calls on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.OnHoldCount">
            <summary>
            Number of held calls on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.OnHoldPendingTransferCount">
            <summary>
            Number of calls pending a transfer on this address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.NoAnswerRingCount">
            <summary>
            The no answer ring count.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanForward">
            <summary>
            Returns whether the address can forward calls.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanMakeCall">
            <summary>
            Returns whether the address can make a call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanPickupCall">
            <summary>
            Returns whether the address can pickup a call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanSetMediaControl">
            <summary>
            Returns whether the address can set media control.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanSetTerminal">
            <summary>
            Returns whether the address can change terminal settings.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanSetupConference">
            <summary>
            Returns whether the address can setup a new conference.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanUncompleteCall">
            <summary>
            Returns whether an address can uncomplete a call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.CanUnparkCall">
            <summary>
            Returns whether an address can unpark a call.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this line
            </summary>
        </member>
        <member name="P:JulMar.Atapi.AddressStatus.ForwardingInformation">
            <summary>
            Returns the current forwarding information for an address.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiAddress">
            <summary>
            This class represents a single Tapi Address object.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.FindCallsByCallState(JulMar.Atapi.CallState)">
            <summary>
            This locates all the matching calls based on call state.
            </summary>
            <param name="requestedCallstates">Callstate desired</param>
            <returns>TapiCall array</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.DeviceSpecific(System.Byte[])">
            <summary>
            This method executes device-specific functionality on the underlying service provider.
            </summary>
            <param name="inData">Input data</param>
            <returns>Output data</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.BeginDeviceSpecific(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            This method executes device-specific functionality on the underlying service provider.
            </summary>
            <param name="inData">Input data</param>
            <param name="acb">Callback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.EndDeviceSpecific(System.IAsyncResult)">
            <summary>
            This method harvests the results from a <see cref="M:JulMar.Atapi.TapiAddress.BeginDeviceSpecific(System.Byte[],System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginDeviceSpecific</param>
            <returns>Output data</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.DeviceSpecific(System.Int32,System.Byte[])">
            <summary>
            This method executes device-specific functionality on the underlying service provider.
            </summary>
            <param name="featureCode">Numeric feature code to execute</param>
            <param name="inData">Input data</param>
            <returns>Output data</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.BeginDeviceSpecific(System.Int32,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            This method executes device-specific functionality on the underlying service provider.
            </summary>
            <param name="featureCode">Numeric feature code to execute</param>
            <param name="inData">Input data</param>
            <param name="acb">Callback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.Forward(JulMar.Atapi.ForwardInfo[],System.Int32,JulMar.Atapi.MakeCallParams)">
            <summary>
            This forwards calls destined for this address according to the specified forwarding instructions. 
            Any specified incoming calls for that address are deflected to the other number by the switch. 
            This function provides a combination of forward and do-not-disturb features.
            </summary>
            <param name="forwardInstructions">The forwarding instructions to apply</param>
            <param name="numRingsNoAnswer">Number of rings before a call is considered a "no answer." If dwNumRingsNoAnswer is out of range, the actual value is set to the nearest value in the allowable range.</param>
            <param name="param">Optional call parameters - only used if a consultation call is returned; otherwise ignored.  May be null for default parameters</param>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.CancelForward">
            <summary>
            This cancels any forwarding request that is currently in effect on this address
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.MakeCall(System.String)">
            <summary>
            Places a new call on the address
            </summary>
            <param name="address">Number to dial</param>
            <returns>New <see>TapiCall</see> object.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.MakeCall(System.String,System.Int32,JulMar.Atapi.MakeCallParams)">
            <summary>
            Places a new call on the address
            </summary>
            <param name="address">Number to dial</param>
            <param name="countryCode">Country code</param>
            <param name="param">Optional <see>MakeCallParams</see> to use while dialing</param>
            <returns>New <see cref="T:JulMar.Atapi.TapiCall"/> object.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.Pickup(System.String,System.String)">
            <summary>
            This picks up a call alerting at the specified destination address and returns a call handle for the picked-up call. 
            If invoked with null for the alertingAddress parameter, a group pickup is performed. If required by the device, groupId specifies the 
            group identifier to which the alerting station belongs.
            </summary>
            <param name="alertingAddress">Address to retrieve call from</param>
            <param name="groupId">Optional group ID, can be null or empty</param>
            <returns>New <see cref="T:JulMar.Atapi.TapiCall"/> object.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.SetupConference(System.Int32,JulMar.Atapi.MakeCallParams,JulMar.Atapi.TapiCall@)">
            <summary>
            This method is used to establish a conference call
            </summary>
            <param name="conferenceCount"># of parties anticipated the conference</param>
            <param name="mcp">Call parameters for created consultation call</param>
            <param name="consultCall">Returning consultation call</param>
            <returns>Conference call</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.Unpark(System.String)">
            <summary>
            This retrieves a call off a parked address
            </summary>
            <param name="parkedAddress">Address to retrieve call from</param>
            <returns>New <see cref="T:JulMar.Atapi.TapiCall"/> object.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.GetExternalDeviceInfo(System.String)">
            <summary>
            This returns a device identifier for the specified device class associated with the call
            </summary>
            <param name="deviceClass">Device Class</param>
            <returns>string or byte[]</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiAddress.ToString">
            <summary>
            Returns a System.String that represents the Address object.
            </summary>
            <returns>String</returns>
        </member>
        <member name="E:JulMar.Atapi.TapiAddress.NewCall">
            <summary>
            This event is raised when a new call is discovered on the address.  It is not raised initially when the 
            owner line is opened and existing calls are there.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiAddress.CallStateChanged">
            <summary>
            This event is raised when a call on this address changes state.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiAddress.CallInfoChanged">
            <summary>
            This event is raised when the information associated with a call changes.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiAddress.Changed">
            <summary>
            This event is raised when the status of the address changes.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.Line">
            <summary>
            The <see>TapiLine</see> associated with the address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.Id">
            <summary>
            The numeric address ID
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.Address">
            <summary>
            The Dialable number for the address. This will never be blank.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.Capabilities">
            <summary>
            Returns the <see>AddressCapabilities</see> capabilities structure.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.Status">
            <summary>
            Returns the <see>AddressStatus</see> status structure.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.Calls">
            <summary>
            Returns the list of active calls on the address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiAddress.AnswerRingCount">
            <summary>
            This gets or sets the number of rings that must occur before an incoming call is answered.  This can be used to implement a "toll-saver" style application.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AddressType">
            <summary>
            This identifies address format, such as standard phone number or e-mail address. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressType.Unknown">
            <summary>
            Not supplied
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressType.PhoneNumber">
            <summary>
            Address type is a standard phone number. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressType.SDP">
            <summary>
            Address type is Session Description Protocol (SDP) conference.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressType.Email">
            <summary>
            Address type is an e-mail name. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressType.DomainName">
            <summary>
            Address type is a domain name. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressType.IPAddress">
            <summary>
            Address type is an IP address. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiVersion">
            <summary>
            Supported TAPI versions
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiVersion.V13">
            <summary>
            TAPI 1.3 - Windows 3.1
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiVersion.V14">
            <summary>
            TAPI 1.4 - Windows 95
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiVersion.V20">
            <summary>
            TAPI 2.0 - Windows NT 4
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiVersion.V21">
            <summary>
            TAPI 2.1 - update
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiVersion.V30">
            <summary>
            TAPI 3.0 - Windows 2000
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TapiVersion.V31">
            <summary>
            TAPI 3.1 - Windows XP/2003
            </summary>
        </member>
        <member name="T:JulMar.Atapi.BearerModes">
            <summary>
            These modes are used to select a certain quality of service for the requested connection from the underlying telephone network. 
            Bearer modes available on a given line are a device capability of the line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.Voice">
            <summary>
            This is a regular 3.1 kHz analog voice-grade bearer service. Bit integrity is not assured. Voice can support fax and modem media types. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.Speech">
            <summary>
            This corresponds to G.711 speech transmission on the call. The network can use processing techniques such as analog transmission, 
            echo cancellation, and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media types.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.MultiUse">
            <summary>
            The multiuse mode defined by ISDN.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.Data">
            <summary>
            The unrestricted data transfer on the call. The data rate is specified separately.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.AlternateSpeechData">
            <summary>
            The alternate transfer of speech or unrestricted data on the same call (ISDN).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.NonCallSignaling">
            <summary>
            This corresponds to a non-call-associated signaling connection from the application to the service provider or switch.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.Passthrough">
            <summary>
            When a call is active in LINEBEARERMODE_PASSTHROUGH, the service provider gives direct access to the attached hardware 
            for control by the application. This mode is used primarily by applications desiring temporary direct control over asynchronous modems, 
            accessed through the Win32 communication functions, for the purpose of configuring or using special features not otherwise supported 
            by the service provider.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BearerModes.RestrictedData">
            <summary>
            Bearer service for digital data in which only the low-order seven bits of each octet may contain user data 
            (for example, for Switched 56kbit/s service).
            </summary>
        </member>
        <member name="T:JulMar.Atapi.MediaModes">
            <summary>
            These constants describe media types (or modes) of a communications session or call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Unknown">
            <summary>
            A media stream exists but its mode is not currently known and may become known later. This would correspond to a call with an 
            unclassified media type. In typical analog telephony environments, an incoming call's media type may be unknown until after 
            the call has been answered and the media stream has been filtered to make a determination. If the unknown media-mode flag is set, 
            other media flags can also be set. This is used to signify that the media is unknown but that it is likely to be one of the 
            other selected media types.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.InteractiveVoice">
            <summary>
            Voice energy was detected on the call, and the call is handled as an interactive voice call with humans on both ends.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.AutomatedVoice">
            <summary>
            Voice energy was detected on the call, and the voice is locally handled by an automated application such as with an 
            answering machine application. When a service provider cannot distinguish between interactive and automated voice on an 
            incoming call, it will report the call as interactive voice.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.DataModem">
            <summary>
            A data modem session on the call. Current modem protocols require the called station to initiate the handshake. For an incoming data modem call, 
            the application can typically make no positive detection. How the service provider makes this determination is its choice. For example, 
            a period of silence just after answering an incoming call can be used as a heuristic to decide that this might be a data modem call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Group3Fax">
            <summary>
            A group 3 fax is being sent or received over the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.TDD">
            <summary>
            A Telephony Devices for the Deaf (TDD) () session on the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Group4Fax">
            <summary>
            A group 4 fax is being sent or received over the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.DigitalData">
            <summary>
            A digital data stream of unspecified format. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Teletex">
            <summary>
            A teletex session on the call. Teletex is one of the telematic services.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Videotex">
            <summary>
            A videotex session on the call. Videotex is one the telematic services.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Telex">
            <summary>
            A telex session on the call. Telex is one of the telematic services.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Mixed">
            <summary>
            A mixed session on the call. Mixed is one of the ISDN telematic services.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.ADSI">
            <summary>
            An Analog Display Services Interface (ADSI) session on the call. ADSI enhances voice calls with alphanumeric information downloaded to 
            the phone and the use of soft buttons on the phone.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.VoiceView">
            <summary>
            The media type of the call is VoiceView.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.Video">
            <summary>
            The media type of the call is video conference
            </summary>
        </member>
        <member name="F:JulMar.Atapi.MediaModes.All">
            <summary>
            All media modes
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ToneModes">
            <summary>
            These constants describe different selections that are used when generating line tones. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneModes.Custom">
            <summary>
            The tone is a custom tone defined by its component frequencies.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneModes.Ringback">
            <summary>
            The tone is ringback tone. Exact definition is service-provider defined.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneModes.Busy">
            <summary>
            The tone is a busy tone. Exact definition is service-provider defined.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneModes.Beep">
            <summary>
            The tone is a beep, such as that used to announce the beginning of a recording. Exact definition is service-provider defined.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneModes.Billing">
            <summary>
            The tone is a billing information tone such as a credit card prompt tone. Exact definition is service-provider defined.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.SpecialDialingChars">
            <summary>
            These constants describe special dialing characters which may be supported through Dial or MakeCall
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialDialingChars.Billing">
            <summary>
            Billing tone "$"
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialDialingChars.Quiet">
            <summary>
            Quite "@"
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialDialingChars.Dialtone">
            <summary>
            Wait for dialtone "W"
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AnswerModes">
            <summary>
            These bit-flag constants describe how an existing active call on a line device is affected by answering another offering call on the same line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AnswerModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AnswerModes.None">
            <summary>
            Answering another call on the same line has no effect on the existing active call on the line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AnswerModes.Drop">
            <summary>
            The currently active call will automatically be dropped.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AnswerModes.Hold">
            <summary>
            The currently active call will automatically be placed on hold.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Privilege">
            <summary>
            These constants indicate the privileges for a given line opener
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Privilege.None">
            <summary>
            No privileges
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Privilege.Monitor">
            <summary>
            Read-only
            </summary>
        </member>
        <member name="F:JulMar.Atapi.Privilege.Owner">
            <summary>
            Read-write
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallState">
            <summary>
            The call states for a given TapiCall
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.None">
            <summary>
            No call-state available
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Idle">
            <summary>
            The call exists but has not been connected. No activity exists on the call. This means that no call is currently active. 
            A call can never transition out of the idle state.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Offering">
            <summary>
            The call is being offered to the station, signaling the arrival of a new call. The offering state is not the same as causing a 
            phone or computer to ring. In some environments, a call in the offering state does not ring the user until the switch instructs 
            the line to ring. For example this state is in use when an incoming call appears on several station sets but only the primary 
            address rings. The instruction to ring does not affect any call states.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Accepted">
            <summary>
            The call was in the offering state and has been accepted. This indicates to other, monitoring, applications that the current owner 
            application has claimed responsibility for answering the call. In ISDN, the accepted state is entered when the called-party equipment 
            sends a message to the switch indicating that it is willing to present the call to the called person. This has the side effect of alerting 
            (ringing) the users at both ends of the call. An incoming call can always be immediately answered without first being separately accepted.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Dialtone">
            <summary>
            The call is receiving a dial tone from the switch. This means that the switch is ready to receive a dialed number.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Dialing">
            <summary>
            The originator is dialing digits on the call. The dialed digits are collected by the switch.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Ringback">
            <summary>
            The station to be called has been reached, and the destination's switch is generating a ring tone back to the originator. A ringback means that 
            the destination address is being alerted to the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Busy">
            <summary>
            The call is receiving a busy tone. A busy tone indicates that the call cannot be completed. This occurs if either a 
            circuit (trunk) or the remote party's station are in use.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.SpecialInfo">
            <summary>
            The call is receiving a special information signal that precedes a prerecorded announcement indicating why a call cannot be completed. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Connected">
            <summary>
            The call has been established and the connection is made. Information is able to flow over the call between the 
            originating address and the destination address.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Proceeding">
            <summary>
            Dialing has completed and the call is proceeding through the switch or telephone network. This occurs after dialing is complete and before the call 
            reaches the dialed party, as indicated by ringback, busy, or answer.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.OnHold">
            <summary>
            The call is on hold by the switch. This frees the physical line. This allows another call to use the line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Conferenced">
            <summary>
            The call is a member of a conference call and is logically in the connected state.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.OnHoldPendingConference">
            <summary>
            The call is currently on hold while it is being added to a conference.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.OnHoldPendingTransfer">
            <summary>
            The call is currently on hold awaiting transfer to another number.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Disconnected">
            <summary>
            The remote party has disconnected from the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallState.Unknown">
            <summary>
            The call exists, but its state is currently unknown. This may be the result of poor call progress detection by the service provider. 
            A call state message with the call state set to unknown may also be generated to inform the TAPI DLL about a new call at a time 
            when the actual call state of the call is not exactly known
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ConnectModes">
            <summary>
            These bit-flag constants describe different substates of a connected call. A mode is available as call 
            status to the application after the call state transitions to connected, and within the LINE_CALLSTATE message 
            indicating the call is in LINECALLSTATE_CONNECTED. These values are used when the call is on an address that is 
            shared (bridged) with other stations primarily electronic key systems. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectModes.Active">
            <summary>
            Indicates that the call is connected at the current station (the current station is a participant in the call). If the call
            state mode is zero (0), the application should assume that the value is "active" This would be the situation on a non-bridged address. 
            The mode can switch between ACTIVE and INACTIVE during a call if the user joins and leaves the call through manual action. In such 
            a bridged situation, a <see cref="M:JulMar.Atapi.TapiCall.Drop(System.Byte[])"/> or <see cref="M:JulMar.Atapi.TapiCall.Hold"/> function call may possibly not actually drop the call 
            or place it on hold, because the status of other stations on the call may govern. For example, attempting to "hold" a call when 
            other stations are participating won't be possible. Instead, the call may simply be changed to the INACTIVE mode if it 
            remains CONNECTED at other stations. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectModes.Inactive">
            <summary>
            Indicates that the call is active at one or more other stations, but the current station is not a participant in the call. If the call state 
            mode is ZERO, the application should assume that the value is "active". This would be the situation on a non-bridged address. A call in 
            the INACTIVE state can be joined using Answer. Many operations that are valid in calls in the CONNECTED state can be impossible in 
            the INACTIVE mode, such as monitoring for tones and digits, because the station is not actually participating in the call; monitoring is usually 
            suspended, although not canceled, while the call is in the INACTIVE mode.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectModes.ActiveHeld">
            <summary>
            Indicates that the station is an active participant in the call, but that the remote party has placed the call on hold. The other party 
            considers the call to be in the onhold state. Normally, such information is available only when both endpoints of the call fall within
            the same switching domain.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectModes.InactiveHeld">
            <summary>
            Indicates that the station is not an active participant in the call, and that the remote party has placed the call on hold.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectModes.Confirmed">
            <summary>
            Indicates that the service provider received affirmative notification that the call has entered the connected state. For example, 
            the notification was received through answer supervision or similar mechanisms.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DisconnectModes">
            <summary>
            These bit-flag constants describe different reasons for a remote disconnect request. A disconnect mode is 
            available as call status to the application after the call state transitions to disconnected. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Normal">
            <summary>
            This is a normal disconnect request by the remote party. The call was terminated normally.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Unknown">
            <summary>
            The reason for the disconnect request is unknown but may become known later. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Reject">
            <summary>
            The remote user has rejected the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Pickup">
            <summary>
            The call was picked up from elsewhere.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Forwarded">
            <summary>
            The call was forwarded by the switch. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Busy">
            <summary>
            The remote user's station is busy.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.NoAnswer">
            <summary>
            The remote user's station does not answer.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.BadAddress">
            <summary>
            The destination address is invalid. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Unreachable">
            <summary>
            The remote user could not be reached.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Congestion">
            <summary>
            The network is congested.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Incompatible">
            <summary>
            The remote user's station equipment is incompatible with the type of call requested.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Unavailable">
            <summary>
            The reason for the disconnect is unavailable and will not become known later.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.NoDialtone">
            <summary>
            A dial tone was not detected within a service-provider defined timeout, at a point during dialing when one was expected 
            (such as at a "W" in the dialable string). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.NumberChanged">
            <summary>
            The call could not be connected because the destination number has been changed, but automatic redirection to the new number is not provided.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.OutOfOrder">
            <summary>
            The call could not be connected or was disconnected because the destination device is out of order. This could occur if for 
            example there were hardware failure.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.TemporaryFailure">
            <summary>
            The call could not be connected or was disconnected because of a temporary failure in the network; the call can be reattempted later and is expected to eventually complete.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.QosUnavailable">
            <summary>
            The call could not be connected or was disconnected because the minimum quality of service could not be obtained or sustained.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Blocked">
            <summary>
            The call could not be connected because calls from the origination address are not being accepted at the destination address. 
            This differs from Rejected in that blocking is implemented in the network (a passive reject) while a rejection is 
            implemented in the destination equipment (an active reject). The blocking can be due to a specific exclusion of the origination address, 
            or because the destination accepts calls from only a selected set of origination address (closed user group). This is appropriate as a 
            blacklisted response. For example, a modem has received an answer, gone more than six seconds without detecting Ringback, failed to connect 
            a defined number of times, determines that the phone number is not valid to call, and issues a 'blacklisted' response.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.DoNotDisturb">
            <summary>
            The call could not be connected because the destination has invoked the Do Not Disturb feature.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectModes.Canceled">
            <summary>
            The call was cancelled.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.BusyModes">
            <summary>
            These bit-flag constants describe different busy signals that the switch or network can generate. 
            These busy signals typically indicate that a different resource that is required to make a call is currently in use. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BusyModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BusyModes.Station">
            <summary>
            The busy signal indicates that the called party's station is busy. This is usually signaled with a normal busy tone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BusyModes.Trunk">
            <summary>
            The busy signal indicates that a trunk or circuit is busy. This is usually signaled with a fast busy tone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BusyModes.Unknown">
            <summary>
            The busy signal's specific mode is currently unknown but may become known later. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BusyModes.Unavailable">
            <summary>
            The busy signal's specific mode is unavailable and will not become known. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DialtoneModes">
            <summary>
            These bit-flag constants describe different types of dial tones which may be presented when the caller picks up a handset.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.Normal">
            <summary>
            This is a normal dial tone, which typically is a continuous tone.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.Special">
            <summary>
            This is a special dial tone indicating that a certain condition, known by the switch or network, is currently in effect. 
            Special dial tones typically use an interrupted tone. As with a normal dial tone, this indicates that the switch is ready to 
            receive the number to be dialed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.Internal">
            <summary>
            This is an internal dial tone, as within a PBX. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.External">
            <summary>
            This is an external (public network) dial tone.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.Unknown">
            <summary>
            The dial tone mode is not currently known but may become known later.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneModes.Unavailable">
            <summary>
            The dial tone mode is unavailable and will not become known. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.OfferingModes">
            <summary>
            These bit-flag constants describe different substates of an offering call. A mode is available as call status to the application 
            after the call state transitions to offering, and within the LINE_CALLSTATE message indicating the call is in LINECALLSTATE_OFFERING. 
            These values are used when the call is on an address that is shared (bridged) with other stations, primarily electronic key systems. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.OfferingModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.OfferingModes.Active">
            <summary>
            Indicates that the call is alerting at the current station and if any application is set up to automatically answer, it can do so. 
            If the call state mode is ZERO, the application should assume that the value is active. This would be the situation on a non-bridged address.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.OfferingModes.Inactive">
            <summary>
            Indicates that the call is being offered at more than one station, but the current station is not alerting. For example, it may be 
            an attendant station where the offering status is advisory, such as blinking a light. Software at the station set for 
            automatic answering should preferably not answer the call, because this should be the prerogative at the primary (alerting) station, 
            but TapiCall.Answer may be used to connect the call. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.SpecialInfoModes">
            <summary>
            These bit-flag constants describes special information signals that the network can use to report various reporting 
            and network observation operations. They are special coded tone sequences transmitted at the beginning of network advisory recorded announcements. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoModes.NoCircuit">
            <summary>
            This special information tone precedes a no circuit or an emergency announcement. These announcements are in the trunk blockage category.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoModes.CustomerIrregularity">
            <summary>
            This special information tone precedes a vacant number, AIS, Centrex number change and nonworking station, access code not dialed or 
            dialed in error, or manual intercept operator message. These conditions are in the customer irregularity category. This is also reported 
            when billing information is rejected and when the dialed address is blocked at the switch. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoModes.Reorder">
            <summary>
            This special information tone precedes a reorder announcement. This announcement is in the equipment irregularity category.
            This is also reported when the telephone is kept offhook too long. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoModes.Unknown">
            <summary>
            Specifics about the special information tone are currently unknown but may become known later. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoModes.Unavailable">
            <summary>
            Specifics about the special information tone are unavailable and will not become known. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DigitModes">
            <summary>
            These constants describe different types of inband digit generation. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitModes.Pulse">
            <summary>
            Uses rotary pulse sequences to signal digits. Valid digits are zero (0) through 9. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitModes.Dtmf">
            <summary>
            Uses DTMF tones to signal digits. Valid digits are zero (0) through 9, '*', '#', 'A', 'B', 'C', and 'D'.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitModes.DtmfEnd">
            <summary>
            Uses DTMF tones to signal digits and detect the down edges. Valid digits are zero (0) through 9, '*', '#', 'A', 'B', 'C', and 'D'.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DigitGatherComplete">
            <summary>
            These bit-flag constants describe the conditions under which buffered digit gathering is terminated. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitGatherComplete.None">
            <summary>
            No value
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitGatherComplete.BufferFull">
            <summary>
            The requested number of digits has been gathered. The buffer is full.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitGatherComplete.DigitTermination">
            <summary>
            One of the termination digits matched a received digit. The matched termination digit is the last digit in the buffer.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitGatherComplete.FirstTimeout">
            <summary>
            The first digit timeout expired. The buffer contains no digits.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitGatherComplete.InterDigitTimeout">
            <summary>
            The inter-digit timeout expired. The buffer contains at least one digit.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitGatherComplete.Canceled">
            <summary>
            The request was canceled by this application, by another application, or because the call terminated.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.RoamingModes">
            <summary>
            The roaming styles which may be presented on a cellular style call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RoamingModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RoamingModes.Unknown">
            <summary>
            The roam mode is currently unknown but may become known later.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RoamingModes.Unavailable">
            <summary>
            The roam mode is unavailable and will not be known.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RoamingModes.Home">
            <summary>
            The line is connected to the home network node.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RoamingModes.RoamingCarrierA">
            <summary>
            The line is connected to the Roam-A carrier and calls are charged accordingly.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RoamingModes.RoamingCarrierB">
            <summary>
            The line is connected to the Roam-B carrier and calls are charged accordingly.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AddressSharingModes">
            <summary>
            The various ways an address can be shared between lines.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressSharingModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressSharingModes.BridgedExclusive">
            <summary>
            The address is bridged to one or more other stations. The first line to activate a call on the line will have exclusive access to the 
            address and calls that may exist on it. Other lines will not be able to use the bridged address while it is in use.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressSharingModes.BridgedNew">
            <summary>
            The address is bridged with one or more other stations. The first line to activate a call on the line will have exclusive access to 
            only the corresponding call. Other applications that use the address will result in new and separate call appearances.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressSharingModes.BridgedShared">
            <summary>
            The address is bridged with one or more other lines. All bridged parties can share in calls on the address, which then functions as a conference.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressSharingModes.Monitored">
            <summary>
            This is an address whose idle/busy status is made available to this line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressSharingModes.Private">
            <summary>
            The address is private to the user's line. It is not assigned to any other station.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallOrigins">
            <summary>
            The origins for a given call
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.Unknown">
            <summary>
            The call origin is currently unknown but may become known later. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.Unavailable">
            <summary>
            The call origin is not available and will never become known for this call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.Outbound">
            <summary>
            The call originated from this station as an outgoing call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.Inbound">
            <summary>
            The call originated as an incoming call, but the service provider is unable to determine whether it came from another station on the same 
            switch or from an external line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.Internal">
            <summary>
            The call originated as an incoming call at a station internal to the same switching environment.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.External">
            <summary>
            The call originated as an incoming call on an external line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallOrigins.Conference">
            <summary>
            The call is a conference call. That is, it is the application's connection to the conference bridge in the switch.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallReasons">
            <summary>
            The reason for a call
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Direct">
            <summary>
            This is a direct incoming or outgoing call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.BusyForward">
            <summary>
            This call was forwarded from another extension that was busy at the time of the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.NoAnswerForward">
            <summary>
            The call was forwarded from another extension that didn't answer the call after some number of rings.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.UnconditionalForward">
            <summary>
            The call was forwarded unconditionally from another number.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Pickup">
            <summary>
            The call was picked up from another extension.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Unpark">
            <summary>
            The call was retrieved as a parked call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Redirect">
            <summary>
            The call was redirected to this station.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.CallCompletion">
            <summary>
            The call was the result of a call completion request.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Transfer">
            <summary>
            The call has been transferred from another number.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Reminder">
            <summary>
            The call is a reminder, or "recall", that the user has a call parked or on hold for potentially a long time.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Unknown">
            <summary>
            The reason for the call is currently unknown but may become known later.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Unavailable">
            <summary>
            The reason for the call is unavailable and will not become known later.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Intrude">
            <summary>
            The call intruded onto the line, either by a call completion action invoked by another station or by operator action. Depending on switch 
            implementation, the call may appear either in the connected state, or conferenced with an existing active call on the line.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.Parked">
            <summary>
            The call was parked on the address. Usually, it appears initially in the onhold state.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.CampedOn">
            <summary>
            The call was camped on the address. Usually, it appears initially in the onhold state, and can be switched to using SwapHold. 
            If an active call becomes idle, the camped-on call may change to the offering state and the device start ringing.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallReasons.RouteRequest">
            <summary>
            The call appears on the address because the switch needs routing instructions from the application. The application should examine the CalledID 
            member and use the Redirect method to provide a new dialable address for the call. If the call is to be blocked instead, the application 
            may call Drop. If the application fails to take action within a switch-defined timeout period, a default action will be taken. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallInfoChangeTypes">
            <summary>
            The different portions of a <seealso cref="T:JulMar.Atapi.TapiCall"/> that can change and cause a CallInfoChange event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.Other">
            <summary>
            Some other portion of the call has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.DeviceSpecificData">
            <summary>
            Device specific data has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.BearerMode">
            <summary>
            The bearer mode for the call has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.DataRate">
            <summary>
            The data rate for the call has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.MediaMode">
            <summary>
            The media mode for the call has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.AppSpecificData">
            <summary>
            The application supplied data has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.Id">
            <summary>
            The call id has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.RelatedId">
            <summary>
            The related call id has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CallOrigin">
            <summary>
            The origin of the call has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CallReason">
            <summary>
            The reason for the call has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CompletionId">
            <summary>
            The completion id for the call has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.OwnerIncrement">
            <summary>
            The number of call owners has incremented.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.OwnerDecrement">
            <summary>
            The number of call owners has decremented.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.NumberOfMonitors">
            <summary>
            The number of applications monitoring this call has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.TrunkId">
            <summary>
            The trunk id for the call has been changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CallerId">
            <summary>
            The callerid information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CalledId">
            <summary>
            The calledid information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.ConnectedId">
            <summary>
            The connectedid information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.RedirectionId">
            <summary>
            The redirectionid information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.RedirectingId">
            <summary>
            The redirecting id information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.Display">
            <summary>
            The display has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.UserUserInfo">
            <summary>
            The UUI data has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.HighLevelCompatibilityInfo">
            <summary>
            The high-level compatibility field has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.LowLevelCompatibilityInfo">
            <summary>
            The low-level compatibility field has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.ChargingInfo">
            <summary>
            The Charging information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.Terminal">
            <summary>
            The terminal information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.DialingParameters">
            <summary>
            The dialing parameters for the call has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.MonitorModes">
            <summary>
            One or more of the digit, tone, or media monitoring fields has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CallTreatment">
            <summary>
            The call treatment has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.QualityOfService">
            <summary>
            The quality of service associated with the call has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeTypes.CallData">
            <summary>
            The call data field has changed.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AddressInfoChangeTypes">
            <summary>
            Flags passed to indicate what has changed on an address for a AddressInfoChange event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.Unknown">
            <summary>
            Unknown items changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.DeviceSpecificData">
            <summary>
            Device specific information changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.InuseZero">
            <summary>
            The address has changed to idle. It is not in use by any stations
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.InuseOne">
            <summary>
            The address has changed from idle or in use by many bridged stations to being in use by just one station. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.InuseMany">
            <summary>
            The monitored or bridged address has changed from being in use by one station to being in use by more than one station. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.NumberOfCalls">
            <summary>
            The number of calls on the address has changed. This is the result of events such as a new incoming call, an outgoing call on the address, or a call changing its hold status.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.ForwardingInformation">
            <summary>
            The forwarding status of the address has changed, including possibly the number of rings for determining a no-answer condition. 
            The application should check the address status to determine details about the address's current forwarding status. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.Terminals">
            <summary>
            The terminal settings for the address have changed. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeTypes.Capabilities">
            <summary>
            Indicates that, due to configuration changes made by the user or other circumstances, the capabilities of the address have changed.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.RemoveFromConferenceType">
            <summary>
            This enumeration determines which calls, if any, may be removed from conferences
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RemoveFromConferenceType.Unknown">
            <summary>
            Unknown if the feature is supported
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RemoveFromConferenceType.None">
            <summary>
            Parties cannot be removed from the conference call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RemoveFromConferenceType.Last">
            <summary>
            Only the most recently added party can be removed from the conference call 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RemoveFromConferenceType.Any">
            <summary>
            Any participating party can be removed from the conference call. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LineInfoChangeTypes">
            <summary>
            These flags are used to determine what has changed on a line device for the 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Unknown">
            <summary>
            Unknown items changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Other">
            <summary>
            The application should check the current device status to determine which items have changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Ringing">
            <summary>
            The switch tells the line to alert the user.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Connected">
            <summary>
            The line was previously disconnected and is now connected to TAPI.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Disconnected">
            <summary>
            This line was previously connected and is now disconnected from TAPI.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.MessageWaitingLamp">
            <summary>
            The message waiting indicator has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.InService">
            <summary>
            The line is connected to TAPI. This happens when TAPI is first activated or when the line wire is physically plugged in and in-service at the switch while TAPI is active.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.OutOfService">
            <summary>
            The line is out of service at the switch or physically disconnected. TAPI cannot be used to operate on the line device.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Maintenance">
            <summary>
            Maintenance is being performed on the line at the switch. TAPI cannot be used to operate on the line device.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Open">
            <summary>
            The line has been opened by another application.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Close">
            <summary>
            The line has been closed by another application.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.NumberOfCalls">
            <summary>
            The number of calls on the line device has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.NumberOfCallCompletions">
            <summary>
            The number of outstanding call completions on the line device has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Terminals">
            <summary>
            The terminal settings have changed. This can happen, for example, if multiple line devices share terminals among them. 
            For example, this can happen when two lines share a phone terminal.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.RoamingMode">
            <summary>
            The roam mode of the line device has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Battery">
            <summary>
            The battery level has changed significantly. This condition applies to cellular phones. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.SignalLevel">
            <summary>
            The signal level has changed significantly (cellular).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.DeviceSpecificData">
            <summary>
            The line's device-specific information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.ReinitRequired">
            <summary>
            Items have changed in the configuration of line devices. To become aware of these changes, for example to become aware ofthe 
            appearance of new line devices, the application should reinitialize its use of TAPI.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Lock">
            <summary>
            The locked status of the line device has changed. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Capabilities">
            <summary>
            Indicates that, due to configuration changes made by the user or by other circumstances, the line capabilities have changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Configuration">
            <summary>
            Indicates that configuration changes have been made to one or more of the media devices associated with the line device.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Translate">
            <summary>
            Indicates that, due to configuration changes made by the user or other circumstances, the number translation information for this line has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.CallCompletionCanceled">
            <summary>
            Indicates that the call completion has been externally canceled and is no longer considered valid
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeTypes.Removed">
            <summary>
            Indicates that the device is being removed from the system by the service provider most likely through user action, through a control panel or similar utility.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneStateChangeTypes">
            <summary>
            These flags are used to determine what has changed on a phone device
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Unknown">
            <summary>
            Unknown items changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Other">
            <summary>
            Phone-status items other than those listed below have changed. The application 
            should check the current phone status to determine which items have changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Connected">
            <summary>
            The connection between the phone device and TAPI was just made. This happens when 
            TAPI is first invoked or when the wire connecting the phone to the PC is plugged 
            in with TAPI active.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Disconnected">
            <summary>
            The connection between the phone device and TAPI was just broken. This happens when 
            the wire connecting the phone set to the PC is unplugged while TAPI is active.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Owner">
            <summary>
            The number of owners for the phone device.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Monitors">
            <summary>
            The number of monitors for the phone device.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Display">
            <summary>
            The display of the phone has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Lamp">
            <summary>
            A lamp of the phone has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.RingMode">
            <summary>
            The ring mode of the phone has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.RingVolume">
            <summary>
            The ring volume of the phone has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.HandsetHookswitch">
            <summary>
            The handset hookswitch state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.HandsetVolume">
            <summary>
            The handset volume state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.HandsetGain">
            <summary>
            The handset gain state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.SpeakerHookswitch">
            <summary>
            The speakerphone's hookswitch state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.SpeakerVolume">
            <summary>
            The speakerphone's volume state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.SpeakerGain">
            <summary>
            The speakerphone's gain state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.HeadsetHookswitch">
            <summary>
            The headset's hookswitch state has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.HeadsetVolume">
            <summary>
            The headset's microphone volume setting has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.HeadsetGain">
            <summary>
            The headset's microphone gain setting has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Suspend">
            <summary>
            The application's use of the phone is temporarily suspended.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Resume">
            <summary>
            The application's use of the phone device is resumed after having been 
            suspended for some time.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.DevSpecific">
            <summary>
            The phone's device-specific information has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Reinit">
            <summary>
            Items have changed in the configuration of phone devices. To become aware of 
            these changes, as for the appearance of new phone devices, the application 
            should reinitialize its use of TAPI.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.CapabilitiesChanged">
            <summary>
            Indicates that, due to configuration changes made by the user or other circumstances, 
            one or more of the members in the PHONECAPS structure have changed. The application 
            should read the updated structure. If a service provider sends a PHONE_STATE 
            message containing this value to TAPI, TAPI will pass it along to applications 
            that have negotiated TAPI version 1.4 or later; applications negotiating a previous 
            API version will receive PHONE_STATE messages specifying PHONESTATE_REINIT, requiring 
            them to shut down and reinitialize their connection to TAPI to obtain the updated 
            information.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateChangeTypes.Removed">
            <summary>
            Indicates that the device is being removed from the system by the service provider, 
            most likely through user action, through a control panel, or through a similar 
            utility. A Removed message will normally be immediately 
            followed by a Closed message on the device. Subsequent attempts to access the 
            device prior to TAPI being reinitialized will result in PHONEERR_NODEVICE 
            being returned to the application. If a service provider sends a PHONE_STATE 
            message containing this value to TAPI, TAPI will pass it along to applications 
            that have negotiated TAPI version 1.4 or later. Applications negotiating a previous 
            API version will not receive any notification. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TranslationOptions">
            <summary>
            These are options used in <see cref="M:JulMar.Atapi.TapiLine.TranslateNumber(System.String,JulMar.Atapi.TranslationOptions)"/>.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TranslationOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TranslationOptions.CancelCallWaiting">
            <summary>
            If a Cancel Call Waiting string is defined for the location, setting this bit will cause that string to be inserted at the beginning of the dialable string. 
            This is commonly used by data modem and fax applications to prevent interruption of calls by call waiting beeps. If no Cancel Call Waiting string is defined 
            for the location, this bit has no affect. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TranslationOptions.ForceLongDistanceCall">
            <summary>
            This option forces the address (number) to be translated as long distance. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.TranslationOptions.ForceLocalCall">
            <summary>
            This option forces the number (address) to be translated as local. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallCompletionMode">
            <summary>
            These describe different ways in which a call can be completed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallCompletionMode.None">
            <summary>
            No completion
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallCompletionMode.Callback">
            <summary>
            Requests the called station to return the call when it returns to idle
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallCompletionMode.Campon">
            <summary>
            Queues the call until the call can be completed. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallCompletionMode.Intrude">
            <summary>
            Adds the application to the existing call at the called station (barge in). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallCompletionMode.Message">
            <summary>
            Leaves a short predefined message for the called station (Leave Word Calling). The message to be sent is specified separately. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ForwardingMode">
            <summary>
            Describes the different types of forwarding which may be applied to lines or addresses.  This is used by the <see cref="T:JulMar.Atapi.ForwardInfo"/> structure.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.Unconditional">
            <summary>
            Forward all calls unconditionally, irrespective of their origin. 
            Use this value when unconditional forwarding for internal and external calls cannot be controlled separately. 
            Unconditional forwarding overrides forwarding on busy and/or no answer conditions. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.UnconditionalInternal">
            <summary>
            Forward all internal calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.UnconditionalExternal">
            <summary>
            Forward all external calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.UnconditionaSpecific">
            <summary>
            Unconditionally forward all calls that originated at a specified address (selective call forwarding). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.Busy">
            <summary>
            Forward all calls on busy, irrespective of their origin. 
            Use this value when forwarding for internal and external calls on busy and on no answer cannot be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusyInternal">
            <summary>
            Forward all internal calls on busy. 
            Use this value when forwarding for internal and external calls on busy and on no answer can be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusyExternal">
            <summary>
            Forward all external calls on busy. 
            Use this value when forwarding for internal and external calls on busy and on no answer can be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusySpecific">
            <summary>
            Forward on busy all calls that originated at a specified address (selective call forwarding). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.NoAnswer">
            <summary>
            Forward all calls on no answer, irrespective of their origin. 
            Use this value when call forwarding for internal and external calls on no answer cannot be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.NoAnswerInternal">
            <summary>
            Forward all internal calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.NoAnswerExternal">
            <summary>
            Forward all external calls on no answer. 
            Use this value when forwarding for internal and external calls on no answer can be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.NoAnswerSpecific">
            <summary>
            Forward on no answer all calls that originated at a specified address (selective call forwarding). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusyNoAnswer">
            <summary>
            Forward all calls on busy/no answer, irrespective of their origin. 
            Use this value when forwarding for internal and external calls on busy and on no answer cannot be controlled separately. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusyNoAnswerInternal">
            <summary>
            Forward all internal calls on busy/no answer. 
            Use this value when call forwarding on busy and on no answer cannot be controlled separately for internal calls. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusyNoAnswerExternal">
            <summary>
            Forward all external calls on busy/no answer. 
            Use this value when call forwarding on busy and on no answer cannot be controlled separately for internal calls. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.BusyNoAnswerSpecific">
            <summary>
            Forward on busy/no answer all calls that originated at a specified address (selective call forwarding). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.Unknown">
            <summary>
            Calls are forwarded, but the conditions under which forwarding will occur are not known at this time. 
            It is possible that the conditions may become known at a future time. (TAPI versions 1.4 and later) 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ForwardingMode.Unavailable">
            <summary>
            Forward on no answer all calls that originated at a specified address (selective call forwarding). 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.HookswitchMode">
            <summary>
            Describe the microphone and speaker components of a hookswitch device
            </summary>
        </member>
        <member name="F:JulMar.Atapi.HookswitchMode.Onhook">
            <summary>
            The device's microphone and speaker are both onhook
            </summary>
        </member>
        <member name="F:JulMar.Atapi.HookswitchMode.Microphone">
            <summary>
            The device's microphone and speaker are both onhook
            </summary>
        </member>
        <member name="F:JulMar.Atapi.HookswitchMode.Speaker">
            <summary>
            The device's speaker is active, the microphone is mute. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.HookswitchMode.MicrophoneAndSpeaker">
            <summary>
            The device's microphone and speaker are both active
            </summary>
        </member>
        <member name="F:JulMar.Atapi.HookswitchMode.Unknown">
            <summary>
            The device's hookswitch mode is currently unknown. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ButtonFunction">
            <summary>
            Commonly defined button functions. These button functions can be used to invoke the corresponding function 
            from the switch using DeviceSpecificFeature. Note that TAPI does not define the semantics of the button 
            functions; it only provides access to the corresponding function. The behavior associated with each of the 
            function values above is generic and can vary based on the telephony environment
            </summary>
            <remarks>Note that vendors can add their own extensions and the value may not be present here.</remarks>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Unknown">
            <summary>
            A "dummy" function assignment that indicates that the exact function of the button is unknown or has not been assigned. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Conference">
            <summary>
            Initiates a conference call or adds a call to a conference call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Transfer">
            <summary>
            Initiates a call transfer or completes the transfer of a call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Drop">
            <summary>
            Drops the active call
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Hold">
            <summary>
            Places the active call on hold. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Recall">
            <summary>
            Unholds a call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Disconnect">
            <summary>
            Disconnects a call, such as after initiating a transfer. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Reconnect">
            <summary>
            Reconnects a call that is on consultation hold. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.MessageWaitOn">
            <summary>
            Turns on a message waiting lamp.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.MessageWaitOff">
            <summary>
            Turns off a message waiting lamp. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SelectRing">
            <summary>
            Allows the user to select the ring pattern of the phone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.AbbreviatedDial">
            <summary>
            The number to be dialed will be indicated using a short, abbreviated number consisting of one digit or a few digits.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Forward">
            <summary>
            Initiates or changes call forwarding to this phone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Pickup">
            <summary>
            Picks up a call ringing on another phone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.RingAgain">
            <summary>
            Initiates a request to be notified if a call cannot be completed normally because of a busy signal or no answer. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Park">
            <summary>
            Parks the active call on another phone, placing it on hold there. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Reject">
            <summary>
            Rejects an incoming call before the call has been answered. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Redirect">
            <summary>
            Redirects an incoming call to another extension before the call has been answered. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Mute">
            <summary>
            Mutes the phone's microphone device. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.VolumeUp">
            <summary>
            Increases the volume of audio through the phone's handset speaker or speakerphone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.VolumeDown">
            <summary>
            Decreases the volume of audio through the phone's handset speaker or speakerphone. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SpeakerOn">
            <summary>
            Turns the phone's external speaker on. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SpeakerOff">
            <summary>
            Turns the phone's external speaker off. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Flash">
            <summary>
            Generates the equivalent of an onhook/offhook sequence. A flash typically indicates that any digits 
            typed next are to be understood as commands to the switch. On many switches, places an active call on consultation hold. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.DataOn">
            <summary>
            Indicates that the next call is a data call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.DataOff">
            <summary>
            Indicates that the next call is not a data call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.DoNotDisturb">
            <summary>
            Places the phone in "do not disturb" mode; incoming calls receive a busy signal or are forwarded to an 
            operator or voice mail system. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Intercom">
            <summary>
            Connects to the intercom to broadcast a page. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.BridgedApp">
            <summary>
            Selects a particular appearance of a bridged address.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Busy">
            <summary>
            Makes the phone appear "busy" to incoming calls. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SelectCall">
            <summary>
            Selects a particular call appearance. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.DateTime">
            <summary>
            Causes the phone to display current date and time; this information would be sent by the switch. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Directory">
            <summary>
            Calls up directory service from the switch
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.ForwardCover">
            <summary>
            Forwards all calls destined for this phone to another phone used for coverage.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.CallerID">
            <summary>
            Requests display of caller ID on the phone's display. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.RedialLastNumber">
            <summary>
            Redials last number dialed. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.NightService">
            <summary>
            Places the phone in the mode it is configured for during night hours. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SendCalls">
            <summary>
            Sends all calls to another phone used for coverage; same as ForwardCover. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.MessageIndicator">
            <summary>
            Controls the message indicator lamp. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.RepertoryDial">
            <summary>
            Repertory dialing—the number to be dialed is provided as a shorthand following pressing of this button. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SetReperatoryDial">
            <summary>
            Programs the shorthand-to-phone number mappings accessible by means of repertory dialing (the "REPDIAL" button). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SystemSpeed">
            <summary>
            The number to be dialed is provided as a shorthand following pressing of this button. 
            The mappings for system speed dialing are configured inside the switch. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.StationSpeed">
            <summary>
            The number to be dialed is provided as a shorthand following pressing of this button. The mappings 
            for station speed dialing are specific to this station (phone). 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.CampOn">
            <summary>
            Camps-on an extension that returns a busy indication. When the remote station returns to idle, 
            the phone will be rung with a distinctive patterns. Picking up the local phone reinitiates the call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.SaveRepeat">
            <summary>
            When pressed while a call or call attempt is active, it will remember that call's number or command. When pressed 
            while no call is active (such as during dial tone), it repeats the most saved command. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.QueueCall">
            <summary>
            Queues a call to an outside number after it encounters a trunk-busy indication. When a trunk becomes 
            later available, the phone will be rung with a distinctive pattern. Picking up the local phone reinitiates the call. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.None">
            <summary>
            A "dummy" function assignment that indicates that the button does not have a function. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonFunction.Send">
            <summary>
            Send the call to a directed destination
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ButtonKey">
            <summary>
            Keypad buttons
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.None">
            <summary>
            Button does not represent a key
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Pound">
            <summary>
            The # symbol
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Star">
            <summary>
            The * symbols
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.One">
            <summary>
            1
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Two">
            <summary>
            2
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Three">
            <summary>
            3
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Four">
            <summary>
            4
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Five">
            <summary>
            5
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Six">
            <summary>
            6
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Seven">
            <summary>
            7
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Eight">
            <summary>
            8
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.Nine">
            <summary>
            9
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonKey.D">
            <summary>
            D
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ButtonMode">
            <summary>
            Used to to describe the meaning associated with the phone's buttons
            </summary>
            <remarks>Note that vendors can add their own extensions and the value may not be present here.</remarks>
        </member>
        <member name="F:JulMar.Atapi.ButtonMode.Dummy">
            <summary>
            This value is used to describe a button/lamp position that has no corresponding button but has only a lamp. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonMode.Call">
            <summary>
            The button is assigned to a call appearance
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonMode.Feature">
            <summary>
            The button is assigned to requesting features from the switch, such as hold, conference, and transfer. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonMode.Keypad">
            <summary>
            The button is one of the twelve keypad buttons, 0 through 9, '*', and '#'. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonMode.Local">
            <summary>
            The button is a local function button, such as mute or volume control. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonMode.Display">
            <summary>
            The button is a "soft" button associated with the phone's display. A phone set can have zero or more display buttons. 
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LampMode">
            <summary>
            Describes the various ways a lamp may be lit. Where the exact on and off cadences can differ across 
            phone sets from different vendors, mapping of actual lamp lighting patterns for most phones onto the 
            values listed above should be straightforward.
            </summary>
            <remarks>Note that vendors can add their own extensions and the value may not be present here.</remarks>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Dummy">
            <summary>
            This value is used to describe a button/lamp position that has no corresponding lamp. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Off">
            <summary>
            The lamp is off. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Steady">
            <summary>
            Steady means the lamp is continuously lit.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Wink">
            <summary>
            Wink means normal rate on and off. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Flash">
            <summary>
            Flash means slow on and off. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Flutter">
            <summary>
            Flutter means fast on and off. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.BrokenFlutter">
            <summary>
            Broken flutter is the superposition of flash and flutter. 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LampMode.Unknown">
            <summary>
            The lamp mode is currently unknown.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ButtonState">
            <summary>
            This models the current phone button states
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonState.Up">
            <summary>
            Button is "unpressed"
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonState.Down">
            <summary>
            Button is currently "pressed"
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonState.Unknown">
            <summary>
            Button status is unknown, but might become known at some point
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ButtonState.Unavailable">
            <summary>
            Button state is unknown and never will be.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LineCapabilities">
            <summary>
            This class contains the capabilities for a single <see cref="T:JulMar.Atapi.TapiLine"/> object.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.LineCapabilities.#ctor(JulMar.Atapi.Interop.LINEDEVCAPS,System.Byte[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Atapi.LineCapabilities.ToString">
            <summary>
            Returns a System.String that represents this object.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.LineCapabilities.ToString(System.String)">
            <summary>
            Formattable ToString
            </summary>
            <param name="format">Format</param>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.LineCapabilities.ToString(System.String,System.IFormatProvider)">
            <summary>
            This implementation provides a customizable formatter
            </summary>
            <param name="format">Format</param>
            <param name="formatProvider">Format provider (not used)</param>
            <returns>String</returns>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.ProviderInfo">
            <summary>
            This provides data about the provider hardware and/or software, such as the vendor name and version numbers of hardware and software.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SwitchInfo">
            <summary>
            This provides data about the switch to which the line device is connected, such as the switch manufacturer, the model name, the software version, etc.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.PermanentLineId">
            <summary>
            Permanent identifier by which the line device is known in the system's configuration.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsVoiceCalls">
            <summary>
            This returns whether the line supports traditional voice calls.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxDataRate">
            <summary>
            Maximum data rate for information exchange over the call, in bits per second.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MediaModes">
            <summary>
            Flag array that indicates the different <see>MediaModes</see> types the address is able to support.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.GenerateToneModes">
            <summary>
            <see>ToneModes</see> that can be generated on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxGenerateToneModeFrequencies">
            <summary>
            Maximum number of frequencies that can be specified when generating a tone using GenerateTone. 
            A value of 0 indicates that tone generation is not available. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxMonitoredToneFrequencies">
            <summary>
            Maximum number of frequencies that can be specified in describing a general tone using the MonitorTone array
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxMonitoredTones">
            <summary>
            Maximum number of entries that can be specified in a tone list to <see cref="M:JulMar.Atapi.TapiCall.BeginMonitoringTones(JulMar.Atapi.MonitorTone[],System.EventHandler{JulMar.Atapi.ToneDetectedEventArgs})"/>.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MinGatherDigitsTimeout">
            <summary>
            Minimum value that can be specified for both the first digit and inter-digit timeout values in milliseconds.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxGatherDigitsTimeout">
            <summary>
            Maximum value that can be specified for both the first digit and inter-digit timeout values in milliseconds.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.AvailableMonitorDigitModes">
            <summary>
            Digit modes than can be detected on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.BearerModes">
            <summary>
            Flag array that indicates the different <see>BearerModes</see> that the address is able to support
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.LineName">
            <summary>
            Name for the line device. This name can be configured by the user when configuring the 
            line device's service provider, and is provided for the user's convenience
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxActiveCallCount">
            <summary>
            Maximum number of (minimum bandwidth) calls that can be active (connected) on the line at any one time. 
            The actual number of active calls may be lower if higher bandwidth calls have been established on the line. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.RingModeCount">
            <summary>
            Number of different ring modes that can be reported in the <see cref="E:JulMar.Atapi.TapiLine.Ringing"/> event. 
            Different ring modes range from one to RingModeCount. Zero indicates no ring. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.AnswerMode">
            <summary>
            Effect on the active call when answering another offering call on a line device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsCrossAddressConferencing">
            <summary>
            Specifies whether calls on different addresses on this line can be conferenced.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsHighLevelInfoElements">
            <summary>
            Specifies whether high-level compatibility information elements are supported on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsLowLevelInfoElements">
            <summary>
            Specifies whether low-level compatibility information elements are supported on this line. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsMediaControl">
            <summary>
            Specifies whether media-control operations are available for calls at this line. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsMultipleAddresses">
            <summary>
            Specifies whether <see cref="M:JulMar.Atapi.TapiAddress.MakeCall(System.String)"/> is able to deal with multiple addresses at once (inverse multiplexing). 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.DropsActiveCallsOnClose">
            <summary>
            Specifies what happens when an open line is closed while the application has calls active on the line. If true, the service provider 
            clears all active calls on the line when the last application that has opened the line closes it. If false, the service provider does 
            not drop active calls in such cases. Instead, the calls remain active and under control of external devices. A service provider typically 
            sets this to false if there is some other device that can keep the call alive, for example, if an analog line has the computer and 
            phone set both connect directly to them in a party-line configuration, the offhook phone will automatically keep the call active even 
            after the computer powers down. Applications should check this flag to determine whether to warn the user (with an OK/Cancel dialog box) 
            that active calls will be lost.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.HasMediaServiceProvider">
            <summary>
            Indicates whether a Media Service Provider (MSP) is associated with the line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsCallHubs">
            <summary>
            Indicates whether call hubs are supported on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsCallHubTracking">
            <summary>
            Indicates whether call hub tracking is supported on this line. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsForwarding">
            <summary>
            Determines whether forwarding of all addresses can be used on the line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsMakeCall">
            <summary>
            An outgoing call can be placed on this line using an unspecified address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsSetMediaControl">
            <summary>
            Media control can be set on this line. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsSetTerminal">
            <summary>
            Terminal modes for this line can be set. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportsSetDeviceStatus">
            <summary>
            Device status may be set on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.SupportedDialingChars">
            <summary>
            Returns the supported dialing characters which may be used when placing calls.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxUUIAcceptSize">
            <summary>
            Maximum size of user-user information, including the null terminator, that can be sent during a call accept.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxUUIAnswerSize">
            <summary>
            Maximum size of user-user information, including the null terminator, that can be sent during a call answer.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxUUIMakeCallSize">
            <summary>
            Maximum size of user-user information, including the null terminator, that can be sent during a makecall method.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxUUIDropSize">
            <summary>
            Maximum size of user-user information, including the null terminator, that can be sent during a call drop.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.MaxUUISendSize">
            <summary>
            Maximum size of user-user information, including the null terminator, that can be sent separately any time during a call with <see cref="M:JulMar.Atapi.TapiCall.SendUserUserInfo(System.String)"/>.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this line
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.Guid">
            <summary>
            GUID permanently associated with the line device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineCapabilities.AvailableDeviceClasses">
            <summary>
            Array of device class identifiers supported on one or more addresses on this line.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LineStatus">
            <summary>
            This class wraps the status for a given <see cref="T:JulMar.Atapi.TapiLine"/> object.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.LineStatus.ToString">
            <summary>
            Returns a System.String that represents this object.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.LineStatus.ToString(System.String)">
            <summary>
            Formattable ToString
            </summary>
            <param name="format">Format</param>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.LineStatus.ToString(System.String,System.IFormatProvider)">
            <summary>
            This implementation provides a customizable formatter
            </summary>
            <param name="format">Format</param>
            <param name="formatProvider">Format provider (not used)</param>
            <returns>String</returns>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.OpenCount">
            <summary>
            Number of active opens on the line device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.OpenMediaModes">
            <summary>
            Value that specifies a bit array that indicates for which <see cref="T:JulMar.Atapi.MediaModes"/> the line device is currently open. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.ActiveCallCount">
            <summary>
            Number of calls on the line in call states other than idle, onhold, onholdpendingtransfer, and onholdpendingconference.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.OnHoldCount">
            <summary>
            Number of calls on the line in the onhold state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.OnHoldPendingTransferCount">
            <summary>
            Number of calls on the line in the onholdpendingtransfer or onholdpendingconference state.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CallCompletionCount">
            <summary>
            Number of outstanding call completion requests on the line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CurrentRingMode">
            <summary>
            Current ring mode on the line device. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.SignalLevel">
            <summary>
            Current signal level of the connection on the line. This is a value in the range 0x00000000 (weakest signal) to 0x0000FFFF (strongest signal).
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.BatteryLevel">
            <summary>
            Current battery level of the line device hardware. This is a value in the range 0x00000000 (battery empty) to 0x0000FFFF (battery full). 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.RoamMode">
            <summary>
            Specifies the current <see cref="T:JulMar.Atapi.RoamingModes"/> of the line device.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CanForward">
            <summary>
            Forwarding of all addresses can be used on the line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CanMakeCall">
            <summary>
            An outgoing call can be placed on this line using an unspecified address.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CanSetMediaControl">
            <summary>
            Media control can be set on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CanSetTerminal">
            <summary>
            Terminal modes for this line can be set.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.CanSetDeviceStatus">
            <summary>
            Device status may be set on the line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.MessageWaitingLampState">
            <summary>
            Indicates whether the message waiting lamp is turned on.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.InService">
            <summary>
            Indicates whether the line is in service. If true, the line is in service. If false, the line is out of service.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.Locked">
            <summary>
            Indicates whether the line is locked or unlocked. This bit is most often used with line devices associated with cellular phones. 
            Many cellular phones have a security mechanism that requires the entry of a password to enable the phone to place calls. This bit 
            can be used to indicate to applications that the phone is locked and cannot place calls until the password is entered on the user 
            interface of the phone so that the application can present an appropriate alert to the user. 
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.Connected">
            <summary>
            Specifies whether the line is connected to TAPI. If true, the line is connected and TAPI is able to operate on the line device. 
            If false, the line is disconnected and the application is unable to control the line device through TAPI.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.DeviceSpecificData">
            <summary>
            Returns the Device Specific data for this line
            </summary>
        </member>
        <member name="P:JulMar.Atapi.LineStatus.AvailableMediaModes">
            <summary>
            Indicates the media types that can be invoked on new calls created on this line device.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiLine">
            <summary>
            This object represents a single exposed line device from Tapi.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.#ctor(JulMar.Atapi.TapiManager,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mgr">Owner</param>
            <param name="deviceId">Device ID for this line</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.NegotiateExtensions(System.Int32,System.Int32,System.EventHandler{JulMar.Atapi.DeviceSpecificEventArgs})">
            <summary>
            This method is used to negotiate extension versions for the TSP.  It is only necessary if the application intends to use device-specific extensions.
            </summary>
            <param name="minVersion">Minimum version to negotiate to</param>
            <param name="maxVersion">Maximum version to negotiate to</param>
            <param name="dsc">Callback for any device-specific notification</param>
            <returns>Negotiated extensions version</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetCallById(System.Int32)">
            <summary>
            This returns a call using the call-id.
            </summary>
            <param name="callId">Callid</param>
            <returns>TapiCall object</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetCalls">
            <summary>
            Returns all the calls on this line device.
            </summary>
            <returns>Array of calls</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.FindAddress(System.String)">
            <summary>
            This locates an address using the Dialable Number
            </summary>
            <param name="number">DN to locate</param>
            <returns>TapiAddress or null if not found.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.ToString">
            <summary>
            Returns a System.String representing this line object
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Open(JulMar.Atapi.MediaModes)">
            <summary>
            This method opens the line and allows it to be used to place or receive calls.
            </summary>
            <param name="mediaModes"><see cref="T:JulMar.Atapi.MediaModes"/> which will be used by the application</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Open(JulMar.Atapi.MediaModes,System.Int32)">
            <summary>
            This method opens the line and allows it to be used to place or receive calls.
            </summary>
            <param name="mediaModes"><see cref="T:JulMar.Atapi.MediaModes"/> which will be used by the application</param>
            <param name="addressId">Address index to only monitor a single address</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Monitor">
            <summary>
            This opens the line in non-owner (monitor) mode so that new and existing calls can be viewed but not manipulated.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Open(JulMar.Atapi.Privilege,JulMar.Atapi.MediaModes,System.Int32)">
            <summary>
            Internal method to open the line
            </summary>
            <param name="openMode"></param>
            <param name="mediaMode"></param>
            <param name="addressId">Address ID to open (-1 for all)</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Close">
            <summary>
            This closes the line device.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.MakeCall(System.String)">
            <summary>
            This places a call on the first available address of the line.
            </summary>
            <param name="address">Number to dial</param>
            <returns><see cref="T:JulMar.Atapi.TapiCall"/> object or null.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.MakeCall(System.String,JulMar.Atapi.Country,JulMar.Atapi.MakeCallParams)">
            <summary>
            This places a call on the first available address of the line.
            </summary>
            <param name="address">Number to dial</param>
            <param name="country"><see cref="T:JulMar.Atapi.Country"/> object (null for default).</param>
            <param name="param">Optional <see cref="T:JulMar.Atapi.MakeCallParams"/> to use when dialing.</param>
            <returns><see cref="T:JulMar.Atapi.TapiCall"/> object or null.</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.UncompleteCall(System.Int32)">
            <summary>
            Cancels the specified call completion request on the specified line
            </summary>
            <param name="completionId">Original completion id from <see cref="M:JulMar.Atapi.TapiCall.CompleteCall(JulMar.Atapi.CallCompletionMode,System.Int32)"/>.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.BeginUncompleteCall(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Cancels the specified call completion request on the specified line
            </summary>
            <param name="completionId">Original completion id from <see cref="M:JulMar.Atapi.TapiCall.CompleteCall(JulMar.Atapi.CallCompletionMode,System.Int32)"/>.</param>
            <param name="acb">AsyncCallback</param>
            <param name="state">State data</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.EndUncompleteCall(System.IAsyncResult)">
            <summary>
            Harvests the results of a previously issued <see cref="M:JulMar.Atapi.TapiLine.BeginUncompleteCall(System.Int32,System.AsyncCallback,System.Object)"/> call.
            </summary>
            <param name="ar">IAsyncResult from BeginCompleteCall</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.TranslateNumber(System.String,JulMar.Atapi.TranslationOptions)">
            <summary>
            This method translates the input number to a dialable number for this line and <see cref="T:JulMar.Atapi.LocationInformation"/>
            </summary>
            <param name="number">Number to translate</param>
            <param name="options">TranslationOptions</param>
            <returns>Dialable number</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.TranslateNumber(System.String,JulMar.Atapi.CallingCard,JulMar.Atapi.TranslationOptions)">
            <summary>
            This method translates the input number to a dialable number for this line and <see cref="T:JulMar.Atapi.LocationInformation"/>
            </summary>
            <param name="number">Number to translate</param>
            <param name="callingCard">Calling card to use for call</param>
            <param name="options">TranslationOptions</param>
            <returns>Dialable number</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Forward(JulMar.Atapi.ForwardInfo[],System.Int32,JulMar.Atapi.MakeCallParams)">
            <summary>
            This forwards calls destined for all addresses on the specified line, according to the specified forwarding instructions. 
            Any specified incoming calls for that address are deflected to the other number by the switch. 
            This function provides a combination of forward and do-not-disturb features.
            </summary>
            <param name="forwardInstructions">The forwarding instructions to apply</param>
            <param name="numRingsNoAnswer">Number of rings before a call is considered a "no answer." If dwNumRingsNoAnswer is out of range, the actual value is set to the nearest value in the allowable range.</param>
            <param name="param">Optional call parameters - only used if a consultation call is returned; otherwise ignored.  May be null for default parameters</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.CancelForward">
            <summary>
            This cancels any forwarding request that is currently in effect.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetExternalDeviceInfo(System.String)">
            <summary>
            This returns a device identifier for the specified device class associated with the call
            </summary>
            <param name="deviceClass">Device Class</param>
            <returns>string or byte[]</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetDeviceID(System.String)">
            <summary>
            Returns a device ID handle from an identifier.
            </summary>
            <param name="identifier">Identifier to lookup</param>
            <returns>Handle or null</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetWaveInDeviceID">
            <summary>
            Returns the device id for the wave input device.  This identifier may be passed to "waveInOpen" to get a HWAVE handle.
            </summary>
            <returns>Wave Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetWaveOutDeviceID">
            <summary>
            Returns the device id for the wave output device.  This identifier may be passed to "waveOutOpen" to get a HWAVE handle.
            </summary>
            <returns>Wave Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetMidiInDeviceID">
            <summary>
            Returns the device id for the MIDI input device.  This identifier may be passed to "midiInOpen" to get a HMIDI handle.
            </summary>
            <returns>MIDI Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetMidiOutDeviceID">
            <summary>
            Returns the device id for the MIDI output device.  This identifier may be passed to "midiOutOpen" to get a HMIDI handle.
            </summary>
            <returns>MIDI Device identifier</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetAssociatedPhone">
            <summary>
            Returns the phone device associated with this line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.GetDeviceConfig(System.String)">
            <summary>
            This returns an "opaque" data structure object, the contents of which are specific to the line (service provider) and device class. 
            The data structure object stores the current configuration of a media-stream device associated with the line device.
            </summary>
            <param name="deviceClass">Specifies the device class of the device whose configuration is requested.</param>
            <returns>Opaque data block which may be passed back</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.SetDeviceConfig(System.String,System.Byte[])">
            <summary>
            This sets the line-specific device information.
            </summary>
            <param name="deviceClass">Specifies the device class of the device whose configuration is requested.</param>
            <param name="data">Data obtained from a previous call to <see cref="M:JulMar.Atapi.TapiLine.GetDeviceConfig(System.String)"/>.</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.SetDeviceState(System.Int32,System.Boolean)">
            <summary>
            This is used to change the line device status
            </summary>
            <param name="type">LINEDEVSTATUS_xxx flag</param>
            <param name="value">True/False</param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Config(System.IntPtr,System.String)">
            <summary>
            This method displays the line configuration dialog.
            </summary>
            <param name="hwnd">Handle to Form owner or IntPtr.Zero</param>
            <param name="deviceClass">Page to display or null</param>
            <returns>true/false</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.OnDeviceSpecific(JulMar.Atapi.TapiCall,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This is called for device-specific extensions
            </summary>
            <param name="call"></param>
            <param name="dwParam1"></param>
            <param name="dwParam2"></param>
            <param name="dwParam3"></param>
        </member>
        <member name="M:JulMar.Atapi.TapiLine.Dispose">
            <summary>
            IDisposable.Dispose method
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiLine.CallStateChanged">
            <summary>
            This event is raised when a call on this address changes state
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiLine.CallInfoChanged">
            <summary>
            This event is raised when the information associated with a call changes
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiLine.NewCall">
            <summary>
            This event is raised when a new call is placed or offering on the line.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiLine.AddressChanged">
            <summary>
            This event is raised when an address on this line changes
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiLine.Changed">
            <summary>
            This event is raised when the status or capabilities of the line has changed.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiLine.Ringing">
            <summary>
            This event is raised when the line is ringing.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.LineHandle">
            <summary>
            This returns the underlying HTLINE which you can use in your
            own interop scenarios to deal with custom methods or places
            which are not wrapped by ATAPI
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.IsValid">
            <summary>
            This returns whether the line device is usable or not.  Removed lines are
            not usable and have no capabilities or properties.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.Id">
            <summary>
            The numeric device ID representing the line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.PermanentId">
            <summary>
            The permanent numeric ID representing this line
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.NegotiatedVersion">
            <summary>
            The <see cref="T:JulMar.Atapi.TapiVersion"/> that this line negotiated to.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.Tag">
            <summary>
            This associates an arbitrary object with the line device
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.DeviceSpecificExtensionID">
            <summary>
            This returns the available TSP device-specific extension ID.  It is the form of a string "a.b.c.d" and will be "0.0.0.0" if no
            device-specific extensions are present.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.Addresses">
            <summary>
            The available addresses on this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.TotalCallCount">
            <summary>
            This retrieves the total number of calls on the line.
            </summary>
            <returns>Call Count</returns>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.Name">
            <summary>
            Returns the Line Name associated with the line.  It will never be empty.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.Capabilities">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.LineCapabilities"/> object for this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.Status">
            <summary>
            Returns the <see cref="T:JulMar.Atapi.LineStatus"/> object for this line.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiLine.IsOpen">
            <summary>
            Returns true/false whether the line is currently open.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiManager">
            <summary>
            The TapiManager class is the starting point for the library.  It does the initial negotiation with TAPI
            and maintains the list of lines which can be worked with.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.#ctor(System.String)">
            <summary>
            Constructor for the TapiManager
            </summary>
            <param name="appname">Application Name</param>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.#ctor(System.String,JulMar.Atapi.TapiVersion)">
            <summary>
            Constructor for the TapiManager
            </summary>
            <param name="appName">Application Name</param>
            <param name="ver">TapiVersion</param>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.Initialize">
            <summary>
            This method initializes the TAPI infrastructure.
            </summary>
            <returns>true/false success indicator</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.Shutdown">
            <summary>
            This method shuts down the TAPI system and releases all handles.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.GetLineByPermanentId(System.Int32)">
            <summary>
            This returns a specific line device using the permanent line id.
            </summary>
            <param name="permanentLineId">Id searching for</param>
            <returns>TapiLine</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.GetLineByName(System.String,System.Boolean)">
            <summary>
            Locates a name using the line name as the search criteria
            </summary>
            <param name="name">Name of the line</param>
            <param name="ignoreCase">True/False whether should be case-sensitive search</param>
            <returns>TapiLine or null</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.GetPhoneByPermanentId(System.Int32)">
            <summary>
            This returns a specific line phone using the permanent phone id.
            </summary>
            <param name="permanentLineId">Id searching for</param>
            <returns>TapiPhone</returns>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.ProcessTapiMessages">
            <summary>
            Processes the TAPI messages
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiManager.ReportQueuedCallStateChanges">
            <summary>
            This is used to report LINE_CALLSTATE changes which got queued up due
            to an async request creating calls.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.ReinitRequired">
            <summary>
            This event is raised when TAPI requires a reinitialization
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.LineAdded">
            <summary>
            This event is raised when TAPI indicates a new line is present
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.LineRemoved">
            <summary>
            This event is raised when TAPI indicates a line has been dynamically removed from the system.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.NewCall">
            <summary>
            This event is raised when a new call is presented on any line.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.CallStateChanged">
            <summary>
            This event is raised when a call on this address changes state
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.CallInfoChanged">
            <summary>
            This event is raised when the information associated with a call changes
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.AddressChanged">
            <summary>
            This event is raised when an address on this line changes
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.LineChanged">
            <summary>
            This event is raised when the status or capabilities of the line has changed.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.LineRinging">
            <summary>
            This event is raised when the line is ringing.
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.PhoneAdded">
            <summary>
            This event is raised when TAPI indicates a new phone is present
            </summary>
        </member>
        <member name="E:JulMar.Atapi.TapiManager.PhoneRemoved">
            <summary>
            This event is raised when TAPI indicates a phone has been dynamically removed from the system.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiManager.Lines">
            <summary>
            This returns the list of <see cref="T:JulMar.Atapi.TapiLine"/> objects which can be worked with.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiManager.Phones">
            <summary>
            This returns the list of <see cref="T:JulMar.Atapi.TapiPhone"/> objects which can be used.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiManager.Providers">
            <summary>
            This returns a list of <see cref="T:JulMar.Atapi.TapiProvider"/> objects represented installed .TSP drivers.
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiManager.LocationInformation">
            <summary>
            This returns the <see cref="P:JulMar.Atapi.TapiManager.LocationInformation"/> object which holds location, calling card and country information.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.NewCallEventArgs">
            <summary>
            Sent along with the New Call EventHandler
            </summary>
        </member>
        <member name="F:JulMar.Atapi.NewCallEventArgs.Call">
            <summary>
            Call which was created
            </summary>
        </member>
        <member name="F:JulMar.Atapi.NewCallEventArgs.Privilege">
            <summary>
            Current privileges for the given call
            </summary>
        </member>
        <member name="M:JulMar.Atapi.NewCallEventArgs.#ctor(JulMar.Atapi.TapiCall,JulMar.Atapi.Privilege)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallStateEventArgs">
            <summary>
            Sent along with the CallState change Call state change EventHandler
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallStateEventArgs.CallState">
            <summary>
            New call state for the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallStateEventArgs.OldCallState">
            <summary>
            Previous call state for the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallStateEventArgs.MediaModes">
            <summary>
            Media modes presented on the call.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallStateEventArgs.Call">
            <summary>
            The call that has just changed
            </summary>
        </member>
        <member name="M:JulMar.Atapi.CallStateEventArgs.#ctor(JulMar.Atapi.TapiCall,JulMar.Atapi.CallState,JulMar.Atapi.CallState,JulMar.Atapi.MediaModes)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ConnectedCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_CONNECTED event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConnectedCallStateEventArgs.Mode">
            <summary>
            The additional connection mode type if available.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DisconnectedCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_DISCONNECTED event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DisconnectedCallStateEventArgs.Mode">
            <summary>
            The additional disconnection mode type if available.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.BusyCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_BUSY event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.BusyCallStateEventArgs.Mode">
            <summary>
            The additional busy mode type if available.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DialtoneCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_DIALTONE event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DialtoneCallStateEventArgs.Mode">
            <summary>
            The additional dialtone mode type if available.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.OfferingCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_OFFERING event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.OfferingCallStateEventArgs.Mode">
            <summary>
            The additional offering mode type if available.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.SpecialInfoCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_SPECIALINFO event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.SpecialInfoCallStateEventArgs.Mode">
            <summary>
            The additional special info mode type if available.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ConferencedCallStateEventArgs">
            <summary>
            Sent with a LINECALLSTATE_CONFERENCED event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ConferencedCallStateEventArgs.ConferenceOwner">
            <summary>
            The conference call owner
            </summary>
        </member>
        <member name="T:JulMar.Atapi.CallInfoChangeEventArgs">
            <summary>
            Sent when a call changes (other than state)
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeEventArgs.Call">
            <summary>
            Call that has new information
            </summary>
        </member>
        <member name="F:JulMar.Atapi.CallInfoChangeEventArgs.Change">
            <summary>
            Item that changed (bitmask)
            </summary>
        </member>
        <member name="T:JulMar.Atapi.RingEventArgs">
            <summary>
            Sent with the LINEDEVSTATE_RINGING message
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RingEventArgs.Line">
            <summary>
            The line that is ringing
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RingEventArgs.RingCount">
            <summary>
            The number of rings which have occurred.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.RingEventArgs.RingerStyle">
            <summary>
            The current ringer type.
            </summary>
        </member>
        <member name="M:JulMar.Atapi.RingEventArgs.#ctor(JulMar.Atapi.TapiLine,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JulMar.Atapi.AddressInfoChangeEventArgs">
            <summary>
            Data sent with the AddressInfo change event
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeEventArgs.Address">
            <summary>
            The address which has changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.AddressInfoChangeEventArgs.Change">
            <summary>
            The change(s) which have occurred.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LineInfoChangeEventArgs">
            <summary>
            Data sent with the Line Info change event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeEventArgs.Line">
            <summary>
            The line which has changed.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineInfoChangeEventArgs.Change">
            <summary>
            The change(s) which have occurred.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DigitDetectedEventArgs">
            <summary>
            Data sent with a <see cref="M:JulMar.Atapi.TapiCall.BeginMonitoringDigits(JulMar.Atapi.DigitModes,System.EventHandler{JulMar.Atapi.DigitDetectedEventArgs})"/> event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitDetectedEventArgs.Call">
            <summary>
            The call where the digit was encountered
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitDetectedEventArgs.Digit">
            <summary>
            The digit itself
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DigitDetectedEventArgs.DigitMode">
            <summary>
            The digit mode that was detected.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.ToneDetectedEventArgs">
            <summary>
            This is passed with the <see cref="M:JulMar.Atapi.TapiCall.BeginMonitoringTones(JulMar.Atapi.MonitorTone[],System.EventHandler{JulMar.Atapi.ToneDetectedEventArgs})"/> callback.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneDetectedEventArgs.Call">
            <summary>
            The call where the tone was encountered
            </summary>
        </member>
        <member name="F:JulMar.Atapi.ToneDetectedEventArgs.Tone">
            <summary>
            The tone detected
            </summary>
        </member>
        <member name="T:JulMar.Atapi.DeviceSpecificEventArgs">
            <summary>
            Event passed with the Device Specific event handler
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DeviceSpecificEventArgs.Line">
            <summary>
            The line associated with the Device Specific request
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DeviceSpecificEventArgs.Call">
            <summary>
            The call associated with the device specific request (may be null).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DeviceSpecificEventArgs.Phone">
            <summary>
            The phone associated with the device specific request (may be null).
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DeviceSpecificEventArgs.Param1">
            <summary>
            Device-specific parameter 1
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DeviceSpecificEventArgs.Param2">
            <summary>
            Device-specific parameter 1
            </summary>
        </member>
        <member name="F:JulMar.Atapi.DeviceSpecificEventArgs.Param3">
            <summary>
            Device-specific parameter 1
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LineAddedEventArgs">
            <summary>
            This event is sent along with the <see cref="E:JulMar.Atapi.TapiManager.LineAdded"/> event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineAddedEventArgs.Line">
            <summary>
            The new line being added to the system.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.LineRemovedEventArgs">
            <summary>
            This event is sent along with the <see cref="E:JulMar.Atapi.TapiManager.LineRemoved"/> event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.LineRemovedEventArgs.Line">
            <summary>
            The new line being added to the system.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneAddedEventArgs">
            <summary>
            This event is sent along with the <see cref="E:JulMar.Atapi.TapiManager.PhoneAdded"/> event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneAddedEventArgs.Phone">
            <summary>
            The new phone being added to the system.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneRemovedEventArgs">
            <summary>
            This event is sent along with the <see cref="E:JulMar.Atapi.TapiManager.PhoneRemoved"/> event.
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneRemovedEventArgs.Phone">
            <summary>
            The new phone being added to the system.
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneStateEventArgs">
            <summary>
             This class is used to report phone state change notifications
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateEventArgs.Phone">
            <summary>
            The phone device where the state changed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneStateEventArgs.Change">
            <summary>
            The change(s) which have occurred
            </summary>
        </member>
        <member name="T:JulMar.Atapi.PhoneButtonPressEventArgs">
            <summary>
            This class is used to report button press notifications
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneButtonPressEventArgs.Phone">
            <summary>
            The phone device 
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneButtonPressEventArgs.Button">
            <summary>
            The button that was pressed
            </summary>
        </member>
        <member name="F:JulMar.Atapi.PhoneButtonPressEventArgs.State">
            <summary>
            Button status
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.TapiEvent">
            <summary>
            Messages for phones and lines
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.HTCALL">
            <summary>
            This class holds a TAPI call handle
            </summary>
        </member>
        <member name="P:JulMar.Atapi.Interop.HTCALL.IsInvalid">
            <summary>
            Fixed according to http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.isinvalid(v=vs.80).aspx
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.HTLINE">
            <summary>
            This class holds a TAPI line handle
            </summary>
        </member>
        <member name="P:JulMar.Atapi.Interop.HTLINE.IsInvalid">
            <summary>
            Fixed according to http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.isinvalid(v=vs.80).aspx
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.HTPHONE">
            <summary>
            This class holds a TAPI phone handle
            </summary>
        </member>
        <member name="P:JulMar.Atapi.Interop.HTPHONE.IsInvalid">
            <summary>
            Fixed according to http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.isinvalid(v=vs.80).aspx
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.HTLINEAPP">
            <summary>
            This class holds a TAPI application handle
            </summary>
        </member>
        <member name="P:JulMar.Atapi.Interop.HTLINEAPP.IsInvalid">
            <summary>
            Fixed according to http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.isinvalid(v=vs.80).aspx
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.HTPHONEAPP">
            <summary>
            This class holds a TAPI phone application handle
            </summary>
        </member>
        <member name="P:JulMar.Atapi.Interop.HTPHONEAPP.IsInvalid">
            <summary>
            Fixed according to http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.isinvalid(v=vs.80).aspx
            </summary>
        </member>
        <member name="T:JulMar.Atapi.Interop.TapiEventCallback">
            <summary>
            Delegate used to describe the PHONECALLBACK and LINECALLBACK used by TAPI32.DLL to notify the application of events
            </summary>
            <param name="dwMessage">TAPI Message</param>
            <param name="dwParam1">Param1</param>
            <param name="dwParam2">Param2</param>
            <param name="dwParam3">Param3</param>
        </member>
        <member name="T:JulMar.Atapi.Interop.NativeMethods">
            <summary>
            This class holds all the API and structures/constants used by TAPI 2.x
            </summary>
        </member>
        <member name="T:JulMar.Atapi.TapiProvider">
            <summary>
            This class represents a single installed service provider
            </summary>
        </member>
        <member name="M:JulMar.Atapi.TapiProvider.ToString">
            <summary>
            Override to return the provider name
            </summary>
            <returns>String with provider name</returns>
        </member>
        <member name="P:JulMar.Atapi.TapiProvider.Name">
            <summary>
            The name of the TSP
            </summary>
        </member>
        <member name="P:JulMar.Atapi.TapiProvider.Id">
            <summary>
            The permanent provider ID
            </summary>
        </member>
    </members>
</doc>
